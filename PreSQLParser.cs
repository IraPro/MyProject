//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Project\hz\WindowsFormsApplication2\WindowsFormsApplication2\PreSQL.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace PreSQL {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class PreSQLParser : Parser {
	public const int
		SCOL=1, DOT=2, OPEN_PAR=3, CLOSE_PAR=4, COMMA=5, ASSIGN=6, STAR=7, PLUS=8, 
		MINUS=9, TILDE=10, PIPE2=11, DIV=12, MOD=13, LT2=14, GT2=15, AMP=16, PIPE=17, 
		LT=18, LT_EQ=19, GT=20, GT_EQ=21, EQ=22, NOT_EQ1=23, NOT_EQ2=24, K_ABORT=25, 
		K_ACTION=26, K_ADD=27, K_AFTER=28, K_ALL=29, K_ALTER=30, K_ANALYZE=31, 
		K_AND=32, K_AS=33, K_ASC=34, K_ATTACH=35, K_AUTOINCREMENT=36, K_BEFORE=37, 
		K_BEGIN=38, K_BETWEEN=39, K_BY=40, K_CASCADE=41, K_CASE=42, K_CAST=43, 
		K_CHECK=44, K_COLLATE=45, K_COLUMN=46, K_COMMIT=47, K_CONFLICT=48, K_CONSTRAINT=49, 
		K_CREATE=50, K_CROSS=51, K_CURRENT_DATE=52, K_CURRENT_TIME=53, K_CURRENT_TIMESTAMP=54, 
		K_DATABASE=55, K_DEFAULT=56, K_DEFERRABLE=57, K_DEFERRED=58, K_DELETE=59, 
		K_DESC=60, K_DETACH=61, K_DISTINCT=62, K_DROP=63, K_EACH=64, K_ELSE=65, 
		K_END=66, K_ESCAPE=67, K_EXCEPT=68, K_EXCLUSIVE=69, K_EXISTS=70, K_EXPLAIN=71, 
		K_FAIL=72, K_FOR=73, K_FOREIGN=74, K_FROM=75, K_FULL=76, K_GLOB=77, K_GROUP=78, 
		K_HAVING=79, K_IF=80, K_IGNORE=81, K_IMMEDIATE=82, K_IN=83, K_INDEX=84, 
		K_INDEXED=85, K_INITIALLY=86, K_INNER=87, K_INSERT=88, K_INSTEAD=89, K_INTERSECT=90, 
		K_INTO=91, K_IS=92, K_ISNULL=93, K_JOIN=94, K_KEY=95, K_LEFT=96, K_LIKE=97, 
		K_LIMIT=98, K_MATCH=99, K_NATURAL=100, K_NO=101, K_NOT=102, K_NOTNULL=103, 
		K_NULL=104, K_OF=105, K_OFFSET=106, K_ON=107, K_OR=108, K_ORDER=109, K_OUTER=110, 
		K_PLAN=111, K_PRAGMA=112, K_PRIMARY=113, K_QUERY=114, K_RAISE=115, K_RECURSIVE=116, 
		K_REFERENCES=117, K_REGEXP=118, K_REINDEX=119, K_RELEASE=120, K_RENAME=121, 
		K_REPLACE=122, K_RESTRICT=123, K_RIGHT=124, K_ROLLBACK=125, K_ROW=126, 
		K_SAVEPOINT=127, K_SELECT=128, K_SET=129, K_TABLE=130, K_TEMP=131, K_TEMPORARY=132, 
		K_THEN=133, K_TO=134, K_TRANSACTION=135, K_TRIGGER=136, K_UNION=137, K_UNIQUE=138, 
		K_UPDATE=139, K_USING=140, K_VACUUM=141, K_VALUES=142, K_VIEW=143, K_VIRTUAL=144, 
		K_WHEN=145, K_WHERE=146, K_WITH=147, K_WITHOUT=148, K_CONNECT=149, K_DISCONNECT=150, 
		IDENTIFIER=151, NUMERIC_LITERAL=152, BIND_PARAMETER=153, STRING_LITERAL=154, 
		BLOB_LITERAL=155, SINGLE_LINE_COMMENT=156, MULTILINE_COMMENT=157, SPACES=158, 
		UNEXPECTED_CHAR=159;
	public static readonly string[] tokenNames = {
		"<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", 
		"'~'", "'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", 
		"'>'", "'>='", "'=='", "'!='", "'<>'", "K_ABORT", "K_ACTION", "K_ADD", 
		"K_AFTER", "K_ALL", "K_ALTER", "K_ANALYZE", "K_AND", "K_AS", "K_ASC", 
		"K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", "K_BETWEEN", "K_BY", 
		"K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", "K_COLLATE", "K_COLUMN", "K_COMMIT", 
		"K_CONFLICT", "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE", 
		"K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", "K_DEFAULT", "K_DEFERRABLE", 
		"K_DEFERRED", "K_DELETE", "K_DESC", "K_DETACH", "K_DISTINCT", "K_DROP", 
		"K_EACH", "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", "K_EXCLUSIVE", "K_EXISTS", 
		"K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", "K_FROM", "K_FULL", "K_GLOB", 
		"K_GROUP", "K_HAVING", "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IN", "K_INDEX", 
		"K_INDEXED", "K_INITIALLY", "K_INNER", "K_INSERT", "K_INSTEAD", "K_INTERSECT", 
		"K_INTO", "K_IS", "K_ISNULL", "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", 
		"K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", "K_NULL", "K_OF", 
		"K_OFFSET", "K_ON", "K_OR", "K_ORDER", "K_OUTER", "K_PLAN", "K_PRAGMA", 
		"K_PRIMARY", "K_QUERY", "K_RAISE", "K_RECURSIVE", "K_REFERENCES", "K_REGEXP", 
		"K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE", "K_RESTRICT", "K_RIGHT", 
		"K_ROLLBACK", "K_ROW", "K_SAVEPOINT", "K_SELECT", "K_SET", "K_TABLE", 
		"K_TEMP", "K_TEMPORARY", "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", 
		"K_UNION", "K_UNIQUE", "K_UPDATE", "K_USING", "K_VACUUM", "K_VALUES", 
		"K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH", "K_WITHOUT", "K_CONNECT", 
		"K_DISCONNECT", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", "STRING_LITERAL", 
		"BLOB_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
		"UNEXPECTED_CHAR"
	};
	public const int
		RULE_parse = 0, RULE_error = 1, RULE_sql_stmt = 2, RULE_alter_table_stmt = 3, 
		RULE_connect_stmt = 4, RULE_disconnect_stmt = 5, RULE_commit_stmt = 6, 
		RULE_create_index_stmt = 7, RULE_create_table_stmt = 8, RULE_create_trigger_stmt = 9, 
		RULE_create_view_stmt = 10, RULE_delete_stmt = 11, RULE_drop_index_stmt = 12, 
		RULE_drop_table_stmt = 13, RULE_drop_trigger_stmt = 14, RULE_drop_view_stmt = 15, 
		RULE_insert_stmt = 16, RULE_rollback_stmt = 17, RULE_select_stmt = 18, 
		RULE_select_or_values = 19, RULE_update_stmt = 20, RULE_column_def = 21, 
		RULE_type_name = 22, RULE_column_constraint = 23, RULE_conflict_clause = 24, 
		RULE_expr = 25, RULE_foreign_key_clause = 26, RULE_raise_function = 27, 
		RULE_indexed_column = 28, RULE_table_constraint = 29, RULE_with_clause = 30, 
		RULE_qualified_table_name = 31, RULE_ordering_term = 32, RULE_common_table_expression = 33, 
		RULE_result_column = 34, RULE_table_or_subquery = 35, RULE_join_clause = 36, 
		RULE_join_operator = 37, RULE_join_constraint = 38, RULE_select_core = 39, 
		RULE_cte_table_name = 40, RULE_signed_number = 41, RULE_literal_value = 42, 
		RULE_unary_operator = 43, RULE_error_message = 44, RULE_module_argument = 45, 
		RULE_column_alias = 46, RULE_keyword = 47, RULE_name = 48, RULE_function_name = 49, 
		RULE_database_name = 50, RULE_table_name = 51, RULE_table_or_index_name = 52, 
		RULE_new_table_name = 53, RULE_column_name = 54, RULE_collation_name = 55, 
		RULE_foreign_table = 56, RULE_index_name = 57, RULE_trigger_name = 58, 
		RULE_view_name = 59, RULE_module_name = 60, RULE_pragma_name = 61, RULE_savepoint_name = 62, 
		RULE_table_alias = 63, RULE_transaction_name = 64, RULE_any_name = 65;
	public static readonly string[] ruleNames = {
		"parse", "error", "sql_stmt", "alter_table_stmt", "connect_stmt", "disconnect_stmt", 
		"commit_stmt", "create_index_stmt", "create_table_stmt", "create_trigger_stmt", 
		"create_view_stmt", "delete_stmt", "drop_index_stmt", "drop_table_stmt", 
		"drop_trigger_stmt", "drop_view_stmt", "insert_stmt", "rollback_stmt", 
		"select_stmt", "select_or_values", "update_stmt", "column_def", "type_name", 
		"column_constraint", "conflict_clause", "expr", "foreign_key_clause", 
		"raise_function", "indexed_column", "table_constraint", "with_clause", 
		"qualified_table_name", "ordering_term", "common_table_expression", "result_column", 
		"table_or_subquery", "join_clause", "join_operator", "join_constraint", 
		"select_core", "cte_table_name", "signed_number", "literal_value", "unary_operator", 
		"error_message", "module_argument", "column_alias", "keyword", "name", 
		"function_name", "database_name", "table_name", "table_or_index_name", 
		"new_table_name", "column_name", "collation_name", "foreign_table", "index_name", 
		"trigger_name", "view_name", "module_name", "pragma_name", "savepoint_name", 
		"table_alias", "transaction_name", "any_name"
	};

	public override string GrammarFileName { get { return "PreSQL.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PreSQLParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ParseContext : ParserRuleContext {
		public ErrorContext error(int i) {
			return GetRuleContext<ErrorContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(PreSQLParser.Eof, 0); }
		public IReadOnlyList<ErrorContext> error() {
			return GetRuleContexts<ErrorContext>();
		}
		public IReadOnlyList<Sql_stmtContext> sql_stmt() {
			return GetRuleContexts<Sql_stmtContext>();
		}
		public Sql_stmtContext sql_stmt(int i) {
			return GetRuleContext<Sql_stmtContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (K_ALTER - 30)) | (1L << (K_COMMIT - 30)) | (1L << (K_CREATE - 30)) | (1L << (K_DELETE - 30)) | (1L << (K_DROP - 30)) | (1L << (K_END - 30)) | (1L << (K_INSERT - 30)))) != 0) || ((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (K_ROLLBACK - 125)) | (1L << (K_SELECT - 125)) | (1L << (K_UPDATE - 125)) | (1L << (K_WITH - 125)) | (1L << (K_CONNECT - 125)) | (1L << (K_DISCONNECT - 125)) | (1L << (UNEXPECTED_CHAR - 125)))) != 0)) {
				{
				State = 134;
				switch (_input.La(1)) {
				case K_ALTER:
				case K_COMMIT:
				case K_CREATE:
				case K_DELETE:
				case K_DROP:
				case K_END:
				case K_INSERT:
				case K_ROLLBACK:
				case K_SELECT:
				case K_UPDATE:
				case K_WITH:
				case K_CONNECT:
				case K_DISCONNECT:
					{
					State = 132; sql_stmt();
					}
					break;
				case UNEXPECTED_CHAR:
					{
					State = 133; error();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 138;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 139; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public IToken _UNEXPECTED_CHAR;
		public ITerminalNode UNEXPECTED_CHAR() { return GetToken(PreSQLParser.UNEXPECTED_CHAR, 0); }
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; _localctx._UNEXPECTED_CHAR = Match(UNEXPECTED_CHAR);
			 
			     //throw new RuntimeException("UNEXPECTED_CHAR=" + (_localctx._UNEXPECTED_CHAR!=null?_localctx._UNEXPECTED_CHAR.Text:null)); 
			   
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmtContext : ParserRuleContext {
		public Create_table_stmtContext create_table_stmt() {
			return GetRuleContext<Create_table_stmtContext>(0);
		}
		public Alter_table_stmtContext alter_table_stmt() {
			return GetRuleContext<Alter_table_stmtContext>(0);
		}
		public Commit_stmtContext commit_stmt() {
			return GetRuleContext<Commit_stmtContext>(0);
		}
		public Rollback_stmtContext rollback_stmt() {
			return GetRuleContext<Rollback_stmtContext>(0);
		}
		public Drop_index_stmtContext drop_index_stmt() {
			return GetRuleContext<Drop_index_stmtContext>(0);
		}
		public Create_index_stmtContext create_index_stmt() {
			return GetRuleContext<Create_index_stmtContext>(0);
		}
		public Drop_trigger_stmtContext drop_trigger_stmt() {
			return GetRuleContext<Drop_trigger_stmtContext>(0);
		}
		public Drop_table_stmtContext drop_table_stmt() {
			return GetRuleContext<Drop_table_stmtContext>(0);
		}
		public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		public Disconnect_stmtContext disconnect_stmt() {
			return GetRuleContext<Disconnect_stmtContext>(0);
		}
		public Connect_stmtContext connect_stmt() {
			return GetRuleContext<Connect_stmtContext>(0);
		}
		public Create_trigger_stmtContext create_trigger_stmt() {
			return GetRuleContext<Create_trigger_stmtContext>(0);
		}
		public Drop_view_stmtContext drop_view_stmt() {
			return GetRuleContext<Drop_view_stmtContext>(0);
		}
		public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Create_view_stmtContext create_view_stmt() {
			return GetRuleContext<Create_view_stmtContext>(0);
		}
		public Sql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterSql_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitSql_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmtContext sql_stmt() {
		Sql_stmtContext _localctx = new Sql_stmtContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_sql_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 144; alter_table_stmt();
				}
				break;

			case 2:
				{
				State = 145; connect_stmt();
				}
				break;

			case 3:
				{
				State = 146; commit_stmt();
				}
				break;

			case 4:
				{
				State = 147; create_index_stmt();
				}
				break;

			case 5:
				{
				State = 148; create_table_stmt();
				}
				break;

			case 6:
				{
				State = 149; create_trigger_stmt();
				}
				break;

			case 7:
				{
				State = 150; create_view_stmt();
				}
				break;

			case 8:
				{
				State = 151; delete_stmt();
				}
				break;

			case 9:
				{
				State = 152; disconnect_stmt();
				}
				break;

			case 10:
				{
				State = 153; drop_index_stmt();
				}
				break;

			case 11:
				{
				State = 154; drop_table_stmt();
				}
				break;

			case 12:
				{
				State = 155; drop_trigger_stmt();
				}
				break;

			case 13:
				{
				State = 156; drop_view_stmt();
				}
				break;

			case 14:
				{
				State = 157; insert_stmt();
				}
				break;

			case 15:
				{
				State = 158; rollback_stmt();
				}
				break;

			case 16:
				{
				State = 159; select_stmt();
				}
				break;

			case 17:
				{
				State = 160; update_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_RENAME() { return GetToken(PreSQLParser.K_RENAME, 0); }
		public ITerminalNode K_ALTER() { return GetToken(PreSQLParser.K_ALTER, 0); }
		public ITerminalNode K_TABLE() { return GetToken(PreSQLParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_COLUMN() { return GetToken(PreSQLParser.K_COLUMN, 0); }
		public ITerminalNode K_TO() { return GetToken(PreSQLParser.K_TO, 0); }
		public New_table_nameContext new_table_name() {
			return GetRuleContext<New_table_nameContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public ITerminalNode K_ADD() { return GetToken(PreSQLParser.K_ADD, 0); }
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterAlter_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitAlter_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_stmtContext alter_table_stmt() {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_alter_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(K_ALTER);
			State = 164; Match(K_TABLE);
			State = 168;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 165; database_name();
				State = 166; Match(DOT);
				}
				break;
			}
			State = 170; table_name();
			State = 179;
			switch (_input.La(1)) {
			case K_RENAME:
				{
				State = 171; Match(K_RENAME);
				State = 172; Match(K_TO);
				State = 173; new_table_name();
				}
				break;
			case K_ADD:
				{
				State = 174; Match(K_ADD);
				State = 176;
				switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
				case 1:
					{
					State = 175; Match(K_COLUMN);
					}
					break;
				}
				State = 178; column_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Connect_stmtContext : ParserRuleContext {
		public ITerminalNode K_CONNECT() { return GetToken(PreSQLParser.K_CONNECT, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Connect_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connect_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterConnect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitConnect_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Connect_stmtContext connect_stmt() {
		Connect_stmtContext _localctx = new Connect_stmtContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_connect_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(K_CONNECT);
			State = 182; database_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disconnect_stmtContext : ParserRuleContext {
		public ITerminalNode K_DISCONNECT() { return GetToken(PreSQLParser.K_DISCONNECT, 0); }
		public Disconnect_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disconnect_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterDisconnect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitDisconnect_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisconnect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Disconnect_stmtContext disconnect_stmt() {
		Disconnect_stmtContext _localctx = new Disconnect_stmtContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_disconnect_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(K_DISCONNECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_stmtContext : ParserRuleContext {
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public ITerminalNode K_COMMIT() { return GetToken(PreSQLParser.K_COMMIT, 0); }
		public ITerminalNode K_END() { return GetToken(PreSQLParser.K_END, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(PreSQLParser.K_TRANSACTION, 0); }
		public Commit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterCommit_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitCommit_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Commit_stmtContext commit_stmt() {
		Commit_stmtContext _localctx = new Commit_stmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_commit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			_la = _input.La(1);
			if ( !(_la==K_COMMIT || _la==K_END) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			State = 191;
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 187; Match(K_TRANSACTION);
				State = 189;
				switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					State = 188; transaction_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_stmtContext : ParserRuleContext {
		public IReadOnlyList<Indexed_columnContext> indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public ITerminalNode K_IF() { return GetToken(PreSQLParser.K_IF, 0); }
		public ITerminalNode K_WHERE() { return GetToken(PreSQLParser.K_WHERE, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(PreSQLParser.K_EXISTS, 0); }
		public ITerminalNode K_INDEX() { return GetToken(PreSQLParser.K_INDEX, 0); }
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public ITerminalNode K_ON() { return GetToken(PreSQLParser.K_ON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_CREATE() { return GetToken(PreSQLParser.K_CREATE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_UNIQUE() { return GetToken(PreSQLParser.K_UNIQUE, 0); }
		public ITerminalNode K_NOT() { return GetToken(PreSQLParser.K_NOT, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Create_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterCreate_index_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitCreate_index_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_stmtContext create_index_stmt() {
		Create_index_stmtContext _localctx = new Create_index_stmtContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_create_index_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(K_CREATE);
			State = 195;
			_la = _input.La(1);
			if (_la==K_UNIQUE) {
				{
				State = 194; Match(K_UNIQUE);
				}
			}

			State = 197; Match(K_INDEX);
			State = 201;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 198; Match(K_IF);
				State = 199; Match(K_NOT);
				State = 200; Match(K_EXISTS);
				}
				break;
			}
			State = 206;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 203; database_name();
				State = 204; Match(DOT);
				}
				break;
			}
			State = 208; index_name();
			State = 209; Match(K_ON);
			State = 210; table_name();
			State = 211; Match(OPEN_PAR);
			State = 212; indexed_column();
			State = 217;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 213; Match(COMMA);
				State = 214; indexed_column();
				}
				}
				State = 219;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 220; Match(CLOSE_PAR);
			State = 223;
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 221; Match(K_WHERE);
				State = 222; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_TABLE() { return GetToken(PreSQLParser.K_TABLE, 0); }
		public ITerminalNode K_IF() { return GetToken(PreSQLParser.K_IF, 0); }
		public Table_constraintContext table_constraint(int i) {
			return GetRuleContext<Table_constraintContext>(i);
		}
		public ITerminalNode K_EXISTS() { return GetToken(PreSQLParser.K_EXISTS, 0); }
		public ITerminalNode K_TEMP() { return GetToken(PreSQLParser.K_TEMP, 0); }
		public ITerminalNode K_AS() { return GetToken(PreSQLParser.K_AS, 0); }
		public ITerminalNode K_CREATE() { return GetToken(PreSQLParser.K_CREATE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public IReadOnlyList<Table_constraintContext> table_constraint() {
			return GetRuleContexts<Table_constraintContext>();
		}
		public ITerminalNode K_WITHOUT() { return GetToken(PreSQLParser.K_WITHOUT, 0); }
		public Column_defContext column_def(int i) {
			return GetRuleContext<Column_defContext>(i);
		}
		public ITerminalNode K_NOT() { return GetToken(PreSQLParser.K_NOT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(PreSQLParser.IDENTIFIER, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_TEMPORARY() { return GetToken(PreSQLParser.K_TEMPORARY, 0); }
		public IReadOnlyList<Column_defContext> column_def() {
			return GetRuleContexts<Column_defContext>();
		}
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterCreate_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitCreate_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_stmtContext create_table_stmt() {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_create_table_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(K_CREATE);
			State = 227;
			_la = _input.La(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 226;
				_la = _input.La(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 229; Match(K_TABLE);
			State = 233;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 230; Match(K_IF);
				State = 231; Match(K_NOT);
				State = 232; Match(K_EXISTS);
				}
				break;
			}
			State = 238;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 235; database_name();
				State = 236; Match(DOT);
				}
				break;
			}
			State = 240; table_name();
			State = 264;
			switch (_input.La(1)) {
			case OPEN_PAR:
				{
				State = 241; Match(OPEN_PAR);
				State = 242; column_def();
				State = 247;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 243; Match(COMMA);
						State = 244; column_def();
						}
						} 
					}
					State = 249;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
				}
				State = 254;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 250; Match(COMMA);
					State = 251; table_constraint();
					}
					}
					State = 256;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 257; Match(CLOSE_PAR);
				State = 260;
				_la = _input.La(1);
				if (_la==K_WITHOUT) {
					{
					State = 258; Match(K_WITHOUT);
					State = 259; Match(IDENTIFIER);
					}
				}

				}
				break;
			case K_AS:
				{
				State = 262; Match(K_AS);
				State = 263; select_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_trigger_stmtContext : ParserRuleContext {
		public ITerminalNode K_INSERT() { return GetToken(PreSQLParser.K_INSERT, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public ITerminalNode K_EXISTS() { return GetToken(PreSQLParser.K_EXISTS, 0); }
		public ITerminalNode K_DELETE() { return GetToken(PreSQLParser.K_DELETE, 0); }
		public Delete_stmtContext delete_stmt(int i) {
			return GetRuleContext<Delete_stmtContext>(i);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public IReadOnlyList<Insert_stmtContext> insert_stmt() {
			return GetRuleContexts<Insert_stmtContext>();
		}
		public Insert_stmtContext insert_stmt(int i) {
			return GetRuleContext<Insert_stmtContext>(i);
		}
		public ITerminalNode K_FOR() { return GetToken(PreSQLParser.K_FOR, 0); }
		public ITerminalNode K_WHEN() { return GetToken(PreSQLParser.K_WHEN, 0); }
		public IReadOnlyList<Delete_stmtContext> delete_stmt() {
			return GetRuleContexts<Delete_stmtContext>();
		}
		public Database_nameContext database_name(int i) {
			return GetRuleContext<Database_nameContext>(i);
		}
		public ITerminalNode K_BEFORE() { return GetToken(PreSQLParser.K_BEFORE, 0); }
		public ITerminalNode K_IF() { return GetToken(PreSQLParser.K_IF, 0); }
		public ITerminalNode K_AFTER() { return GetToken(PreSQLParser.K_AFTER, 0); }
		public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		public ITerminalNode K_BEGIN() { return GetToken(PreSQLParser.K_BEGIN, 0); }
		public ITerminalNode K_EACH() { return GetToken(PreSQLParser.K_EACH, 0); }
		public ITerminalNode K_OF() { return GetToken(PreSQLParser.K_OF, 0); }
		public ITerminalNode K_ROW() { return GetToken(PreSQLParser.K_ROW, 0); }
		public Update_stmtContext update_stmt(int i) {
			return GetRuleContext<Update_stmtContext>(i);
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public IReadOnlyList<Update_stmtContext> update_stmt() {
			return GetRuleContexts<Update_stmtContext>();
		}
		public ITerminalNode K_ON() { return GetToken(PreSQLParser.K_ON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public ITerminalNode K_CREATE() { return GetToken(PreSQLParser.K_CREATE, 0); }
		public ITerminalNode K_UPDATE() { return GetToken(PreSQLParser.K_UPDATE, 0); }
		public ITerminalNode K_NOT() { return GetToken(PreSQLParser.K_NOT, 0); }
		public ITerminalNode K_END() { return GetToken(PreSQLParser.K_END, 0); }
		public IReadOnlyList<Database_nameContext> database_name() {
			return GetRuleContexts<Database_nameContext>();
		}
		public IReadOnlyList<Select_stmtContext> select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		public ITerminalNode K_TRIGGER() { return GetToken(PreSQLParser.K_TRIGGER, 0); }
		public Create_trigger_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_trigger_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterCreate_trigger_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitCreate_trigger_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_trigger_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_trigger_stmtContext create_trigger_stmt() {
		Create_trigger_stmtContext _localctx = new Create_trigger_stmtContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_create_trigger_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(K_CREATE);
			State = 267; Match(K_TRIGGER);
			State = 271;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				State = 268; Match(K_IF);
				State = 269; Match(K_NOT);
				State = 270; Match(K_EXISTS);
				}
				break;
			}
			State = 276;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				State = 273; database_name();
				State = 274; Match(DOT);
				}
				break;
			}
			State = 278; trigger_name();
			State = 280;
			_la = _input.La(1);
			if (_la==K_AFTER || _la==K_BEFORE) {
				{
				State = 279;
				_la = _input.La(1);
				if ( !(_la==K_AFTER || _la==K_BEFORE) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 296;
			switch (_input.La(1)) {
			case K_DELETE:
				{
				State = 282; Match(K_DELETE);
				}
				break;
			case K_INSERT:
				{
				State = 283; Match(K_INSERT);
				}
				break;
			case K_UPDATE:
				{
				State = 284; Match(K_UPDATE);
				State = 294;
				_la = _input.La(1);
				if (_la==K_OF) {
					{
					State = 285; Match(K_OF);
					State = 286; column_name();
					State = 291;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 287; Match(COMMA);
						State = 288; column_name();
						}
						}
						State = 293;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 298; Match(K_ON);
			State = 302;
			switch ( Interpreter.AdaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				State = 299; database_name();
				State = 300; Match(DOT);
				}
				break;
			}
			State = 304; table_name();
			State = 308;
			_la = _input.La(1);
			if (_la==K_FOR) {
				{
				State = 305; Match(K_FOR);
				State = 306; Match(K_EACH);
				State = 307; Match(K_ROW);
				}
			}

			State = 312;
			_la = _input.La(1);
			if (_la==K_WHEN) {
				{
				State = 310; Match(K_WHEN);
				State = 311; expr(0);
				}
			}

			State = 314; Match(K_BEGIN);
			State = 323;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 319;
				switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					State = 315; update_stmt();
					}
					break;

				case 2:
					{
					State = 316; insert_stmt();
					}
					break;

				case 3:
					{
					State = 317; delete_stmt();
					}
					break;

				case 4:
					{
					State = 318; select_stmt();
					}
					break;
				}
				State = 321; Match(SCOL);
				}
				}
				State = 325;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==K_DELETE || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (K_INSERT - 88)) | (1L << (K_SELECT - 88)) | (1L << (K_UPDATE - 88)) | (1L << (K_WITH - 88)))) != 0) );
			State = 327; Match(K_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_view_stmtContext : ParserRuleContext {
		public ITerminalNode K_AS() { return GetToken(PreSQLParser.K_AS, 0); }
		public ITerminalNode K_CREATE() { return GetToken(PreSQLParser.K_CREATE, 0); }
		public ITerminalNode K_IF() { return GetToken(PreSQLParser.K_IF, 0); }
		public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public ITerminalNode K_VIEW() { return GetToken(PreSQLParser.K_VIEW, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(PreSQLParser.K_EXISTS, 0); }
		public ITerminalNode K_NOT() { return GetToken(PreSQLParser.K_NOT, 0); }
		public ITerminalNode K_TEMP() { return GetToken(PreSQLParser.K_TEMP, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_TEMPORARY() { return GetToken(PreSQLParser.K_TEMPORARY, 0); }
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterCreate_view_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitCreate_view_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_view_stmtContext create_view_stmt() {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_create_view_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(K_CREATE);
			State = 331;
			_la = _input.La(1);
			if (_la==K_TEMP || _la==K_TEMPORARY) {
				{
				State = 330;
				_la = _input.La(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 333; Match(K_VIEW);
			State = 337;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 334; Match(K_IF);
				State = 335; Match(K_NOT);
				State = 336; Match(K_EXISTS);
				}
				break;
			}
			State = 342;
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 339; database_name();
				State = 340; Match(DOT);
				}
				break;
			}
			State = 344; view_name();
			State = 345; Match(K_AS);
			State = 346; select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode K_WHERE() { return GetToken(PreSQLParser.K_WHERE, 0); }
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_FROM() { return GetToken(PreSQLParser.K_FROM, 0); }
		public ITerminalNode K_DELETE() { return GetToken(PreSQLParser.K_DELETE, 0); }
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterDelete_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitDelete_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 348; with_clause();
				}
			}

			State = 351; Match(K_DELETE);
			State = 352; Match(K_FROM);
			State = 353; qualified_table_name();
			State = 356;
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 354; Match(K_WHERE);
				State = 355; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_index_stmtContext : ParserRuleContext {
		public ITerminalNode K_INDEX() { return GetToken(PreSQLParser.K_INDEX, 0); }
		public ITerminalNode K_IF() { return GetToken(PreSQLParser.K_IF, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_DROP() { return GetToken(PreSQLParser.K_DROP, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(PreSQLParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterDrop_index_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitDrop_index_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_index_stmtContext drop_index_stmt() {
		Drop_index_stmtContext _localctx = new Drop_index_stmtContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_drop_index_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; Match(K_DROP);
			State = 359; Match(K_INDEX);
			State = 362;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 360; Match(K_IF);
				State = 361; Match(K_EXISTS);
				}
				break;
			}
			State = 367;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 364; database_name();
				State = 365; Match(DOT);
				}
				break;
			}
			State = 369; index_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_table_stmtContext : ParserRuleContext {
		public ITerminalNode K_TABLE() { return GetToken(PreSQLParser.K_TABLE, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_IF() { return GetToken(PreSQLParser.K_IF, 0); }
		public ITerminalNode K_DROP() { return GetToken(PreSQLParser.K_DROP, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(PreSQLParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterDrop_table_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitDrop_table_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_table_stmtContext drop_table_stmt() {
		Drop_table_stmtContext _localctx = new Drop_table_stmtContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_drop_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(K_DROP);
			State = 372; Match(K_TABLE);
			State = 375;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 373; Match(K_IF);
				State = 374; Match(K_EXISTS);
				}
				break;
			}
			State = 380;
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 377; database_name();
				State = 378; Match(DOT);
				}
				break;
			}
			State = 382; table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_trigger_stmtContext : ParserRuleContext {
		public ITerminalNode K_IF() { return GetToken(PreSQLParser.K_IF, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public ITerminalNode K_DROP() { return GetToken(PreSQLParser.K_DROP, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(PreSQLParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public ITerminalNode K_TRIGGER() { return GetToken(PreSQLParser.K_TRIGGER, 0); }
		public Drop_trigger_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterDrop_trigger_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitDrop_trigger_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_trigger_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_trigger_stmtContext drop_trigger_stmt() {
		Drop_trigger_stmtContext _localctx = new Drop_trigger_stmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_drop_trigger_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(K_DROP);
			State = 385; Match(K_TRIGGER);
			State = 388;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				State = 386; Match(K_IF);
				State = 387; Match(K_EXISTS);
				}
				break;
			}
			State = 393;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 390; database_name();
				State = 391; Match(DOT);
				}
				break;
			}
			State = 395; trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_view_stmtContext : ParserRuleContext {
		public ITerminalNode K_IF() { return GetToken(PreSQLParser.K_IF, 0); }
		public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		public ITerminalNode K_DROP() { return GetToken(PreSQLParser.K_DROP, 0); }
		public ITerminalNode K_VIEW() { return GetToken(PreSQLParser.K_VIEW, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(PreSQLParser.K_EXISTS, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Drop_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_view_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterDrop_view_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitDrop_view_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_view_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_view_stmtContext drop_view_stmt() {
		Drop_view_stmtContext _localctx = new Drop_view_stmtContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_drop_view_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; Match(K_DROP);
			State = 398; Match(K_VIEW);
			State = 401;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 399; Match(K_IF);
				State = 400; Match(K_EXISTS);
				}
				break;
			}
			State = 406;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 403; database_name();
				State = 404; Match(DOT);
				}
				break;
			}
			State = 408; view_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_stmtContext : ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode K_INTO() { return GetToken(PreSQLParser.K_INTO, 0); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_VALUES() { return GetToken(PreSQLParser.K_VALUES, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_INSERT() { return GetToken(PreSQLParser.K_INSERT, 0); }
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_DEFAULT() { return GetToken(PreSQLParser.K_DEFAULT, 0); }
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterInsert_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitInsert_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_stmtContext insert_stmt() {
		Insert_stmtContext _localctx = new Insert_stmtContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_insert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 410; with_clause();
				}
			}

			{
			State = 413; Match(K_INSERT);
			}
			State = 414; Match(K_INTO);
			State = 418;
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 415; database_name();
				State = 416; Match(DOT);
				}
				break;
			}
			State = 420; table_name();
			State = 432;
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 421; Match(OPEN_PAR);
				State = 422; column_name();
				State = 427;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 423; Match(COMMA);
					State = 424; column_name();
					}
					}
					State = 429;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 430; Match(CLOSE_PAR);
				}
			}

			State = 465;
			switch (_input.La(1)) {
			case K_VALUES:
				{
				State = 434; Match(K_VALUES);
				State = 435; Match(OPEN_PAR);
				State = 436; expr(0);
				State = 441;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 437; Match(COMMA);
					State = 438; expr(0);
					}
					}
					State = 443;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 444; Match(CLOSE_PAR);
				State = 459;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 445; Match(COMMA);
					State = 446; Match(OPEN_PAR);
					State = 447; expr(0);
					State = 452;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 448; Match(COMMA);
						State = 449; expr(0);
						}
						}
						State = 454;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 455; Match(CLOSE_PAR);
					}
					}
					State = 461;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case K_SELECT:
				{
				State = 462; select_stmt();
				}
				break;
			case K_DEFAULT:
				{
				State = 463; Match(K_DEFAULT);
				State = 464; Match(K_VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_stmtContext : ParserRuleContext {
		public ITerminalNode K_SAVEPOINT() { return GetToken(PreSQLParser.K_SAVEPOINT, 0); }
		public Transaction_nameContext transaction_name() {
			return GetRuleContext<Transaction_nameContext>(0);
		}
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public ITerminalNode K_TO() { return GetToken(PreSQLParser.K_TO, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(PreSQLParser.K_TRANSACTION, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(PreSQLParser.K_ROLLBACK, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterRollback_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitRollback_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_stmtContext rollback_stmt() {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_rollback_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467; Match(K_ROLLBACK);
			State = 472;
			_la = _input.La(1);
			if (_la==K_TRANSACTION) {
				{
				State = 468; Match(K_TRANSACTION);
				State = 470;
				switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					State = 469; transaction_name();
					}
					break;
				}
				}
			}

			State = 479;
			_la = _input.La(1);
			if (_la==K_TO) {
				{
				State = 474; Match(K_TO);
				State = 476;
				switch ( Interpreter.AdaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					State = 475; Match(K_SAVEPOINT);
					}
					break;
				}
				State = 478; savepoint_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public Select_or_valuesContext select_or_values(int i) {
			return GetRuleContext<Select_or_valuesContext>(i);
		}
		public ITerminalNode K_UNION(int i) {
			return GetToken(PreSQLParser.K_UNION, i);
		}
		public ITerminalNode K_ALL(int i) {
			return GetToken(PreSQLParser.K_ALL, i);
		}
		public IReadOnlyList<Ordering_termContext> ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		public IReadOnlyList<ITerminalNode> K_ALL() { return GetTokens(PreSQLParser.K_ALL); }
		public ITerminalNode K_ORDER() { return GetToken(PreSQLParser.K_ORDER, 0); }
		public IReadOnlyList<Select_or_valuesContext> select_or_values() {
			return GetRuleContexts<Select_or_valuesContext>();
		}
		public ITerminalNode K_BY() { return GetToken(PreSQLParser.K_BY, 0); }
		public IReadOnlyList<ITerminalNode> K_UNION() { return GetTokens(PreSQLParser.K_UNION); }
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; select_or_values();
			State = 490;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_UNION) {
				{
				{
				State = 485;
				switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
				case 1:
					{
					State = 482; Match(K_UNION);
					}
					break;

				case 2:
					{
					State = 483; Match(K_UNION);
					State = 484; Match(K_ALL);
					}
					break;
				}
				State = 487; select_or_values();
				}
				}
				State = 492;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 503;
			_la = _input.La(1);
			if (_la==K_ORDER) {
				{
				State = 493; Match(K_ORDER);
				State = 494; Match(K_BY);
				State = 495; ordering_term();
				State = 500;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 496; Match(COMMA);
					State = 497; ordering_term();
					}
					}
					State = 502;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_valuesContext : ParserRuleContext {
		public ITerminalNode K_WHERE() { return GetToken(PreSQLParser.K_WHERE, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IReadOnlyList<Result_columnContext> result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode K_FROM() { return GetToken(PreSQLParser.K_FROM, 0); }
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_ALL() { return GetToken(PreSQLParser.K_ALL, 0); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode K_GROUP() { return GetToken(PreSQLParser.K_GROUP, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(PreSQLParser.K_DISTINCT, 0); }
		public ITerminalNode K_HAVING() { return GetToken(PreSQLParser.K_HAVING, 0); }
		public IReadOnlyList<Table_or_subqueryContext> table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public ITerminalNode K_SELECT() { return GetToken(PreSQLParser.K_SELECT, 0); }
		public ITerminalNode K_BY() { return GetToken(PreSQLParser.K_BY, 0); }
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Select_or_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterSelect_or_values(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitSelect_or_values(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_or_values(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_valuesContext select_or_values() {
		Select_or_valuesContext _localctx = new Select_or_valuesContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_select_or_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; Match(K_SELECT);
			State = 507;
			switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				State = 506;
				_la = _input.La(1);
				if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 509; result_column();
			State = 514;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 510; Match(COMMA);
				State = 511; result_column();
				}
				}
				State = 516;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 529;
			_la = _input.La(1);
			if (_la==K_FROM) {
				{
				State = 517; Match(K_FROM);
				State = 527;
				switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					State = 518; table_or_subquery();
					State = 523;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 519; Match(COMMA);
						State = 520; table_or_subquery();
						}
						}
						State = 525;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;

				case 2:
					{
					State = 526; join_clause();
					}
					break;
				}
				}
			}

			State = 533;
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 531; Match(K_WHERE);
				State = 532; expr(0);
				}
			}

			State = 549;
			_la = _input.La(1);
			if (_la==K_GROUP) {
				{
				State = 535; Match(K_GROUP);
				State = 536; Match(K_BY);
				State = 537; expr(0);
				State = 542;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 538; Match(COMMA);
					State = 539; expr(0);
					}
					}
					State = 544;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 547;
				_la = _input.La(1);
				if (_la==K_HAVING) {
					{
					State = 545; Match(K_HAVING);
					State = 546; expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode K_WHERE() { return GetToken(PreSQLParser.K_WHERE, 0); }
		public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public ITerminalNode K_UPDATE() { return GetToken(PreSQLParser.K_UPDATE, 0); }
		public Qualified_table_nameContext qualified_table_name() {
			return GetRuleContext<Qualified_table_nameContext>(0);
		}
		public ITerminalNode K_SET() { return GetToken(PreSQLParser.K_SET, 0); }
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			_la = _input.La(1);
			if (_la==K_WITH) {
				{
				State = 551; with_clause();
				}
			}

			State = 554; Match(K_UPDATE);
			State = 555; qualified_table_name();
			State = 556; Match(K_SET);
			State = 557; column_name();
			State = 558; Match(ASSIGN);
			State = 559; expr(0);
			State = 567;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 560; Match(COMMA);
				State = 561; column_name();
				State = 562; Match(ASSIGN);
				State = 563; expr(0);
				}
				}
				State = 569;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 572;
			_la = _input.La(1);
			if (_la==K_WHERE) {
				{
				State = 570; Match(K_WHERE);
				State = 571; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_defContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public IReadOnlyList<Column_constraintContext> column_constraint() {
			return GetRuleContexts<Column_constraintContext>();
		}
		public Column_constraintContext column_constraint(int i) {
			return GetRuleContext<Column_constraintContext>(i);
		}
		public Column_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterColumn_def(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitColumn_def(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_defContext column_def() {
		Column_defContext _localctx = new Column_defContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_column_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574; column_name();
			State = 576;
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 575; type_name();
				}
				break;
			}
			State = 581;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CHECK) | (1L << K_COLLATE) | (1L << K_CONSTRAINT) | (1L << K_DEFAULT))) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (K_NOT - 102)) | (1L << (K_NULL - 102)) | (1L << (K_PRIMARY - 102)) | (1L << (K_REFERENCES - 102)) | (1L << (K_UNIQUE - 102)))) != 0)) {
				{
				{
				State = 578; column_constraint();
				}
				}
				State = 583;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public Signed_numberContext signed_number(int i) {
			return GetRuleContext<Signed_numberContext>(i);
		}
		public IReadOnlyList<Signed_numberContext> signed_number() {
			return GetRuleContexts<Signed_numberContext>();
		}
		public IReadOnlyList<NameContext> name() {
			return GetRuleContexts<NameContext>();
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 584; name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 587;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,74,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 599;
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 589; Match(OPEN_PAR);
				State = 590; signed_number();
				State = 591; Match(CLOSE_PAR);
				}
				break;

			case 2:
				{
				State = 593; Match(OPEN_PAR);
				State = 594; signed_number();
				State = 595; Match(COMMA);
				State = 596; signed_number();
				State = 597; Match(CLOSE_PAR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_constraintContext : ParserRuleContext {
		public ITerminalNode K_COLLATE() { return GetToken(PreSQLParser.K_COLLATE, 0); }
		public ITerminalNode K_DEFAULT() { return GetToken(PreSQLParser.K_DEFAULT, 0); }
		public ITerminalNode K_AUTOINCREMENT() { return GetToken(PreSQLParser.K_AUTOINCREMENT, 0); }
		public ITerminalNode K_DESC() { return GetToken(PreSQLParser.K_DESC, 0); }
		public ITerminalNode K_PRIMARY() { return GetToken(PreSQLParser.K_PRIMARY, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_CHECK() { return GetToken(PreSQLParser.K_CHECK, 0); }
		public ITerminalNode K_NULL() { return GetToken(PreSQLParser.K_NULL, 0); }
		public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		public ITerminalNode K_UNIQUE() { return GetToken(PreSQLParser.K_UNIQUE, 0); }
		public ITerminalNode K_KEY() { return GetToken(PreSQLParser.K_KEY, 0); }
		public ITerminalNode K_CONSTRAINT() { return GetToken(PreSQLParser.K_CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(PreSQLParser.K_NOT, 0); }
		public ITerminalNode K_ASC() { return GetToken(PreSQLParser.K_ASC, 0); }
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterColumn_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitColumn_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_constraintContext column_constraint() {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_column_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			_la = _input.La(1);
			if (_la==K_CONSTRAINT) {
				{
				State = 601; Match(K_CONSTRAINT);
				State = 602; name();
				}
			}

			State = 638;
			switch (_input.La(1)) {
			case K_PRIMARY:
				{
				State = 605; Match(K_PRIMARY);
				State = 606; Match(K_KEY);
				State = 608;
				_la = _input.La(1);
				if (_la==K_ASC || _la==K_DESC) {
					{
					State = 607;
					_la = _input.La(1);
					if ( !(_la==K_ASC || _la==K_DESC) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
				}

				State = 610; conflict_clause();
				State = 612;
				_la = _input.La(1);
				if (_la==K_AUTOINCREMENT) {
					{
					State = 611; Match(K_AUTOINCREMENT);
					}
				}

				}
				break;
			case K_NOT:
			case K_NULL:
				{
				State = 615;
				_la = _input.La(1);
				if (_la==K_NOT) {
					{
					State = 614; Match(K_NOT);
					}
				}

				State = 617; Match(K_NULL);
				State = 618; conflict_clause();
				}
				break;
			case K_UNIQUE:
				{
				State = 619; Match(K_UNIQUE);
				State = 620; conflict_clause();
				}
				break;
			case K_CHECK:
				{
				State = 621; Match(K_CHECK);
				State = 622; Match(OPEN_PAR);
				State = 623; expr(0);
				State = 624; Match(CLOSE_PAR);
				}
				break;
			case K_DEFAULT:
				{
				State = 626; Match(K_DEFAULT);
				State = 633;
				switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
				case 1:
					{
					State = 627; signed_number();
					}
					break;

				case 2:
					{
					State = 628; literal_value();
					}
					break;

				case 3:
					{
					State = 629; Match(OPEN_PAR);
					State = 630; expr(0);
					State = 631; Match(CLOSE_PAR);
					}
					break;
				}
				}
				break;
			case K_COLLATE:
				{
				State = 635; Match(K_COLLATE);
				State = 636; collation_name();
				}
				break;
			case K_REFERENCES:
				{
				State = 637; foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conflict_clauseContext : ParserRuleContext {
		public ITerminalNode K_ON() { return GetToken(PreSQLParser.K_ON, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(PreSQLParser.K_IGNORE, 0); }
		public ITerminalNode K_CONFLICT() { return GetToken(PreSQLParser.K_CONFLICT, 0); }
		public ITerminalNode K_ABORT() { return GetToken(PreSQLParser.K_ABORT, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(PreSQLParser.K_ROLLBACK, 0); }
		public ITerminalNode K_FAIL() { return GetToken(PreSQLParser.K_FAIL, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(PreSQLParser.K_REPLACE, 0); }
		public Conflict_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conflict_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterConflict_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitConflict_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConflict_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conflict_clauseContext conflict_clause() {
		Conflict_clauseContext _localctx = new Conflict_clauseContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_conflict_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			_la = _input.La(1);
			if (_la==K_ON) {
				{
				State = 640; Match(K_ON);
				State = 641; Match(K_CONFLICT);
				State = 642;
				_la = _input.La(1);
				if ( !(_la==K_ABORT || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (K_FAIL - 72)) | (1L << (K_IGNORE - 72)) | (1L << (K_REPLACE - 72)) | (1L << (K_ROLLBACK - 72)))) != 0)) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode BIND_PARAMETER() { return GetToken(PreSQLParser.BIND_PARAMETER, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(PreSQLParser.K_COLLATE, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(PreSQLParser.K_EXISTS, 0); }
		public ITerminalNode K_CASE() { return GetToken(PreSQLParser.K_CASE, 0); }
		public ITerminalNode K_MATCH() { return GetToken(PreSQLParser.K_MATCH, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode K_IS() { return GetToken(PreSQLParser.K_IS, 0); }
		public ITerminalNode K_ISNULL() { return GetToken(PreSQLParser.K_ISNULL, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public ITerminalNode K_NULL() { return GetToken(PreSQLParser.K_NULL, 0); }
		public ITerminalNode K_OR() { return GetToken(PreSQLParser.K_OR, 0); }
		public IReadOnlyList<ITerminalNode> K_WHEN() { return GetTokens(PreSQLParser.K_WHEN); }
		public ITerminalNode K_BETWEEN() { return GetToken(PreSQLParser.K_BETWEEN, 0); }
		public ITerminalNode K_THEN(int i) {
			return GetToken(PreSQLParser.K_THEN, i);
		}
		public ITerminalNode K_CAST() { return GetToken(PreSQLParser.K_CAST, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(PreSQLParser.K_REGEXP, 0); }
		public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public ITerminalNode K_WHEN(int i) {
			return GetToken(PreSQLParser.K_WHEN, i);
		}
		public ITerminalNode K_LIKE() { return GetToken(PreSQLParser.K_LIKE, 0); }
		public ITerminalNode K_GLOB() { return GetToken(PreSQLParser.K_GLOB, 0); }
		public Raise_functionContext raise_function() {
			return GetRuleContext<Raise_functionContext>(0);
		}
		public ITerminalNode K_AS() { return GetToken(PreSQLParser.K_AS, 0); }
		public ITerminalNode K_ELSE() { return GetToken(PreSQLParser.K_ELSE, 0); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode K_DISTINCT() { return GetToken(PreSQLParser.K_DISTINCT, 0); }
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_IN() { return GetToken(PreSQLParser.K_IN, 0); }
		public ITerminalNode K_AND() { return GetToken(PreSQLParser.K_AND, 0); }
		public ITerminalNode K_NOT() { return GetToken(PreSQLParser.K_NOT, 0); }
		public ITerminalNode K_ESCAPE() { return GetToken(PreSQLParser.K_ESCAPE, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public ITerminalNode K_END() { return GetToken(PreSQLParser.K_END, 0); }
		public ITerminalNode K_NOTNULL() { return GetToken(PreSQLParser.K_NOTNULL, 0); }
		public IReadOnlyList<ITerminalNode> K_THEN() { return GetTokens(PreSQLParser.K_THEN); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			switch ( Interpreter.AdaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				State = 646; unary_operator();
				State = 647; expr(21);
				}
				break;

			case 2:
				{
				State = 649; literal_value();
				}
				break;

			case 3:
				{
				State = 650; Match(BIND_PARAMETER);
				}
				break;

			case 4:
				{
				State = 659;
				switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
				case 1:
					{
					State = 654;
					switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
					case 1:
						{
						State = 651; database_name();
						State = 652; Match(DOT);
						}
						break;
					}
					State = 656; table_name();
					State = 657; Match(DOT);
					}
					break;
				}
				State = 661; column_name();
				}
				break;

			case 5:
				{
				State = 662; function_name();
				State = 663; Match(OPEN_PAR);
				State = 676;
				switch (_input.La(1)) {
				case OPEN_PAR:
				case PLUS:
				case MINUS:
				case TILDE:
				case K_ABORT:
				case K_ACTION:
				case K_ADD:
				case K_AFTER:
				case K_ALL:
				case K_ALTER:
				case K_ANALYZE:
				case K_AND:
				case K_AS:
				case K_ASC:
				case K_ATTACH:
				case K_AUTOINCREMENT:
				case K_BEFORE:
				case K_BEGIN:
				case K_BETWEEN:
				case K_BY:
				case K_CASCADE:
				case K_CASE:
				case K_CAST:
				case K_CHECK:
				case K_COLLATE:
				case K_COLUMN:
				case K_COMMIT:
				case K_CONFLICT:
				case K_CONSTRAINT:
				case K_CREATE:
				case K_CROSS:
				case K_CURRENT_DATE:
				case K_CURRENT_TIME:
				case K_CURRENT_TIMESTAMP:
				case K_DATABASE:
				case K_DEFAULT:
				case K_DEFERRABLE:
				case K_DEFERRED:
				case K_DELETE:
				case K_DESC:
				case K_DETACH:
				case K_DISTINCT:
				case K_DROP:
				case K_EACH:
				case K_ELSE:
				case K_END:
				case K_ESCAPE:
				case K_EXCEPT:
				case K_EXCLUSIVE:
				case K_EXISTS:
				case K_EXPLAIN:
				case K_FAIL:
				case K_FOR:
				case K_FOREIGN:
				case K_FROM:
				case K_FULL:
				case K_GLOB:
				case K_GROUP:
				case K_HAVING:
				case K_IF:
				case K_IGNORE:
				case K_IMMEDIATE:
				case K_IN:
				case K_INDEX:
				case K_INDEXED:
				case K_INITIALLY:
				case K_INNER:
				case K_INSERT:
				case K_INSTEAD:
				case K_INTERSECT:
				case K_INTO:
				case K_IS:
				case K_ISNULL:
				case K_JOIN:
				case K_KEY:
				case K_LEFT:
				case K_LIKE:
				case K_LIMIT:
				case K_MATCH:
				case K_NATURAL:
				case K_NO:
				case K_NOT:
				case K_NOTNULL:
				case K_NULL:
				case K_OF:
				case K_OFFSET:
				case K_ON:
				case K_OR:
				case K_ORDER:
				case K_OUTER:
				case K_PLAN:
				case K_PRAGMA:
				case K_PRIMARY:
				case K_QUERY:
				case K_RAISE:
				case K_RECURSIVE:
				case K_REFERENCES:
				case K_REGEXP:
				case K_REINDEX:
				case K_RELEASE:
				case K_RENAME:
				case K_REPLACE:
				case K_RESTRICT:
				case K_RIGHT:
				case K_ROLLBACK:
				case K_ROW:
				case K_SAVEPOINT:
				case K_SELECT:
				case K_SET:
				case K_TABLE:
				case K_TEMP:
				case K_TEMPORARY:
				case K_THEN:
				case K_TO:
				case K_TRANSACTION:
				case K_TRIGGER:
				case K_UNION:
				case K_UNIQUE:
				case K_UPDATE:
				case K_USING:
				case K_VACUUM:
				case K_VALUES:
				case K_VIEW:
				case K_VIRTUAL:
				case K_WHEN:
				case K_WHERE:
				case K_WITH:
				case K_WITHOUT:
				case IDENTIFIER:
				case NUMERIC_LITERAL:
				case BIND_PARAMETER:
				case STRING_LITERAL:
				case BLOB_LITERAL:
					{
					State = 665;
					switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
					case 1:
						{
						State = 664; Match(K_DISTINCT);
						}
						break;
					}
					State = 667; expr(0);
					State = 672;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 668; Match(COMMA);
						State = 669; expr(0);
						}
						}
						State = 674;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				case STAR:
					{
					State = 675; Match(STAR);
					}
					break;
				case CLOSE_PAR:
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 678; Match(CLOSE_PAR);
				}
				break;

			case 6:
				{
				State = 680; Match(OPEN_PAR);
				State = 681; expr(0);
				State = 682; Match(CLOSE_PAR);
				}
				break;

			case 7:
				{
				State = 684; Match(K_CAST);
				State = 685; Match(OPEN_PAR);
				State = 686; expr(0);
				State = 687; Match(K_AS);
				State = 688; type_name();
				State = 689; Match(CLOSE_PAR);
				}
				break;

			case 8:
				{
				State = 695;
				_la = _input.La(1);
				if (_la==K_EXISTS || _la==K_NOT) {
					{
					State = 692;
					_la = _input.La(1);
					if (_la==K_NOT) {
						{
						State = 691; Match(K_NOT);
						}
					}

					State = 694; Match(K_EXISTS);
					}
				}

				State = 697; Match(OPEN_PAR);
				State = 698; select_stmt();
				State = 699; Match(CLOSE_PAR);
				}
				break;

			case 9:
				{
				State = 701; Match(K_CASE);
				State = 703;
				switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
				case 1:
					{
					State = 702; expr(0);
					}
					break;
				}
				State = 710;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 705; Match(K_WHEN);
					State = 706; expr(0);
					State = 707; Match(K_THEN);
					State = 708; expr(0);
					}
					}
					State = 712;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==K_WHEN );
				State = 716;
				_la = _input.La(1);
				if (_la==K_ELSE) {
					{
					State = 714; Match(K_ELSE);
					State = 715; expr(0);
					}
				}

				State = 718; Match(K_END);
				}
				break;

			case 10:
				{
				State = 720; raise_function();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 823;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,106,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 821;
					switch ( Interpreter.AdaptivePredict(_input,105,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 723;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 724; Match(PIPE2);
						State = 725; expr(21);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 726;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 727;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 728; expr(20);
						}
						break;

					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 729;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 730;
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 731; expr(19);
						}
						break;

					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 732;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 733;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT2) | (1L << GT2) | (1L << AMP) | (1L << PIPE))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 734; expr(18);
						}
						break;

					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 735;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 736;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 737; expr(17);
						}
						break;

					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 738;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 751;
						switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
						case 1:
							{
							State = 739; Match(ASSIGN);
							}
							break;

						case 2:
							{
							State = 740; Match(EQ);
							}
							break;

						case 3:
							{
							State = 741; Match(NOT_EQ1);
							}
							break;

						case 4:
							{
							State = 742; Match(NOT_EQ2);
							}
							break;

						case 5:
							{
							State = 743; Match(K_IS);
							}
							break;

						case 6:
							{
							State = 744; Match(K_IS);
							State = 745; Match(K_NOT);
							}
							break;

						case 7:
							{
							State = 746; Match(K_IN);
							}
							break;

						case 8:
							{
							State = 747; Match(K_LIKE);
							}
							break;

						case 9:
							{
							State = 748; Match(K_GLOB);
							}
							break;

						case 10:
							{
							State = 749; Match(K_MATCH);
							}
							break;

						case 11:
							{
							State = 750; Match(K_REGEXP);
							}
							break;
						}
						State = 753; expr(16);
						}
						break;

					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 754;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 755; Match(K_AND);
						State = 756; expr(15);
						}
						break;

					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 757;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 758; Match(K_OR);
						State = 759; expr(14);
						}
						break;

					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 760;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 761; Match(K_IS);
						State = 763;
						switch ( Interpreter.AdaptivePredict(_input,95,_ctx) ) {
						case 1:
							{
							State = 762; Match(K_NOT);
							}
							break;
						}
						State = 765; expr(7);
						}
						break;

					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 766;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 768;
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 767; Match(K_NOT);
							}
						}

						State = 770; Match(K_BETWEEN);
						State = 771; expr(0);
						State = 772; Match(K_AND);
						State = 773; expr(6);
						}
						break;

					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 775;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 776; Match(K_COLLATE);
						State = 777; collation_name();
						}
						break;

					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 778;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 780;
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 779; Match(K_NOT);
							}
						}

						State = 782;
						_la = _input.La(1);
						if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (K_GLOB - 77)) | (1L << (K_LIKE - 77)) | (1L << (K_MATCH - 77)) | (1L << (K_REGEXP - 77)))) != 0)) ) {
						_errHandler.RecoverInline(this);
						}
						Consume();
						State = 783; expr(0);
						State = 786;
						switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
						case 1:
							{
							State = 784; Match(K_ESCAPE);
							State = 785; expr(0);
							}
							break;
						}
						}
						break;

					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 788;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 793;
						switch (_input.La(1)) {
						case K_ISNULL:
							{
							State = 789; Match(K_ISNULL);
							}
							break;
						case K_NOTNULL:
							{
							State = 790; Match(K_NOTNULL);
							}
							break;
						case K_NOT:
							{
							State = 791; Match(K_NOT);
							State = 792; Match(K_NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;

					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 795;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 797;
						_la = _input.La(1);
						if (_la==K_NOT) {
							{
							State = 796; Match(K_NOT);
							}
						}

						State = 799; Match(K_IN);
						State = 819;
						switch ( Interpreter.AdaptivePredict(_input,104,_ctx) ) {
						case 1:
							{
							State = 800; Match(OPEN_PAR);
							State = 810;
							switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
							case 1:
								{
								State = 801; select_stmt();
								}
								break;

							case 2:
								{
								State = 802; expr(0);
								State = 807;
								_errHandler.Sync(this);
								_la = _input.La(1);
								while (_la==COMMA) {
									{
									{
									State = 803; Match(COMMA);
									State = 804; expr(0);
									}
									}
									State = 809;
									_errHandler.Sync(this);
									_la = _input.La(1);
								}
								}
								break;
							}
							State = 812; Match(CLOSE_PAR);
							}
							break;

						case 2:
							{
							State = 816;
							switch ( Interpreter.AdaptivePredict(_input,103,_ctx) ) {
							case 1:
								{
								State = 813; database_name();
								State = 814; Match(DOT);
								}
								break;
							}
							State = 818; table_name();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 825;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,106,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Foreign_key_clauseContext : ParserRuleContext {
		public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		public IReadOnlyList<ITerminalNode> K_RESTRICT() { return GetTokens(PreSQLParser.K_RESTRICT); }
		public ITerminalNode K_NO(int i) {
			return GetToken(PreSQLParser.K_NO, i);
		}
		public IReadOnlyList<ITerminalNode> K_CASCADE() { return GetTokens(PreSQLParser.K_CASCADE); }
		public IReadOnlyList<ITerminalNode> K_DEFAULT() { return GetTokens(PreSQLParser.K_DEFAULT); }
		public ITerminalNode K_RESTRICT(int i) {
			return GetToken(PreSQLParser.K_RESTRICT, i);
		}
		public ITerminalNode K_ACTION(int i) {
			return GetToken(PreSQLParser.K_ACTION, i);
		}
		public IReadOnlyList<ITerminalNode> K_DELETE() { return GetTokens(PreSQLParser.K_DELETE); }
		public ITerminalNode K_DEFAULT(int i) {
			return GetToken(PreSQLParser.K_DEFAULT, i);
		}
		public ITerminalNode K_SET(int i) {
			return GetToken(PreSQLParser.K_SET, i);
		}
		public ITerminalNode K_ON(int i) {
			return GetToken(PreSQLParser.K_ON, i);
		}
		public IReadOnlyList<ITerminalNode> K_MATCH() { return GetTokens(PreSQLParser.K_MATCH); }
		public ITerminalNode K_INITIALLY() { return GetToken(PreSQLParser.K_INITIALLY, 0); }
		public ITerminalNode K_DEFERRABLE() { return GetToken(PreSQLParser.K_DEFERRABLE, 0); }
		public IReadOnlyList<ITerminalNode> K_SET() { return GetTokens(PreSQLParser.K_SET); }
		public IReadOnlyList<ITerminalNode> K_NULL() { return GetTokens(PreSQLParser.K_NULL); }
		public IReadOnlyList<NameContext> name() {
			return GetRuleContexts<NameContext>();
		}
		public ITerminalNode K_NULL(int i) {
			return GetToken(PreSQLParser.K_NULL, i);
		}
		public Foreign_tableContext foreign_table() {
			return GetRuleContext<Foreign_tableContext>(0);
		}
		public ITerminalNode K_DELETE(int i) {
			return GetToken(PreSQLParser.K_DELETE, i);
		}
		public IReadOnlyList<ITerminalNode> K_NO() { return GetTokens(PreSQLParser.K_NO); }
		public ITerminalNode K_UPDATE(int i) {
			return GetToken(PreSQLParser.K_UPDATE, i);
		}
		public ITerminalNode K_DEFERRED() { return GetToken(PreSQLParser.K_DEFERRED, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(PreSQLParser.K_IMMEDIATE, 0); }
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public IReadOnlyList<ITerminalNode> K_ON() { return GetTokens(PreSQLParser.K_ON); }
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public ITerminalNode K_REFERENCES() { return GetToken(PreSQLParser.K_REFERENCES, 0); }
		public ITerminalNode K_CASCADE(int i) {
			return GetToken(PreSQLParser.K_CASCADE, i);
		}
		public IReadOnlyList<ITerminalNode> K_UPDATE() { return GetTokens(PreSQLParser.K_UPDATE); }
		public ITerminalNode K_MATCH(int i) {
			return GetToken(PreSQLParser.K_MATCH, i);
		}
		public IReadOnlyList<ITerminalNode> K_ACTION() { return GetTokens(PreSQLParser.K_ACTION); }
		public ITerminalNode K_NOT() { return GetToken(PreSQLParser.K_NOT, 0); }
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterForeign_key_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitForeign_key_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_clauseContext foreign_key_clause() {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_foreign_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826; Match(K_REFERENCES);
			State = 827; foreign_table();
			State = 839;
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 828; Match(OPEN_PAR);
				State = 829; column_name();
				State = 834;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 830; Match(COMMA);
					State = 831; column_name();
					}
					}
					State = 836;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 837; Match(CLOSE_PAR);
				}
			}

			State = 859;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==K_MATCH || _la==K_ON) {
				{
				{
				State = 855;
				switch (_input.La(1)) {
				case K_ON:
					{
					State = 841; Match(K_ON);
					State = 842;
					_la = _input.La(1);
					if ( !(_la==K_DELETE || _la==K_UPDATE) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					State = 851;
					switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
					case 1:
						{
						State = 843; Match(K_SET);
						State = 844; Match(K_NULL);
						}
						break;

					case 2:
						{
						State = 845; Match(K_SET);
						State = 846; Match(K_DEFAULT);
						}
						break;

					case 3:
						{
						State = 847; Match(K_CASCADE);
						}
						break;

					case 4:
						{
						State = 848; Match(K_RESTRICT);
						}
						break;

					case 5:
						{
						State = 849; Match(K_NO);
						State = 850; Match(K_ACTION);
						}
						break;
					}
					}
					break;
				case K_MATCH:
					{
					State = 853; Match(K_MATCH);
					State = 854; name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 861;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 872;
			switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
			case 1:
				{
				State = 863;
				_la = _input.La(1);
				if (_la==K_NOT) {
					{
					State = 862; Match(K_NOT);
					}
				}

				State = 865; Match(K_DEFERRABLE);
				State = 870;
				switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					State = 866; Match(K_INITIALLY);
					State = 867; Match(K_DEFERRED);
					}
					break;

				case 2:
					{
					State = 868; Match(K_INITIALLY);
					State = 869; Match(K_IMMEDIATE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_functionContext : ParserRuleContext {
		public Error_messageContext error_message() {
			return GetRuleContext<Error_messageContext>(0);
		}
		public ITerminalNode K_IGNORE() { return GetToken(PreSQLParser.K_IGNORE, 0); }
		public ITerminalNode K_ABORT() { return GetToken(PreSQLParser.K_ABORT, 0); }
		public ITerminalNode K_RAISE() { return GetToken(PreSQLParser.K_RAISE, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(PreSQLParser.K_ROLLBACK, 0); }
		public ITerminalNode K_FAIL() { return GetToken(PreSQLParser.K_FAIL, 0); }
		public Raise_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterRaise_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitRaise_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_functionContext raise_function() {
		Raise_functionContext _localctx = new Raise_functionContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_raise_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874; Match(K_RAISE);
			State = 875; Match(OPEN_PAR);
			State = 880;
			switch (_input.La(1)) {
			case K_IGNORE:
				{
				State = 876; Match(K_IGNORE);
				}
				break;
			case K_ABORT:
			case K_FAIL:
			case K_ROLLBACK:
				{
				State = 877;
				_la = _input.La(1);
				if ( !(_la==K_ABORT || _la==K_FAIL || _la==K_ROLLBACK) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				State = 878; Match(COMMA);
				State = 879; error_message();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 882; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexed_columnContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(PreSQLParser.K_COLLATE, 0); }
		public ITerminalNode K_DESC() { return GetToken(PreSQLParser.K_DESC, 0); }
		public ITerminalNode K_ASC() { return GetToken(PreSQLParser.K_ASC, 0); }
		public Indexed_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexed_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterIndexed_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitIndexed_column(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexed_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexed_columnContext indexed_column() {
		Indexed_columnContext _localctx = new Indexed_columnContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_indexed_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884; column_name();
			State = 887;
			_la = _input.La(1);
			if (_la==K_COLLATE) {
				{
				State = 885; Match(K_COLLATE);
				State = 886; collation_name();
				}
			}

			State = 890;
			_la = _input.La(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 889;
				_la = _input.La(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_constraintContext : ParserRuleContext {
		public IReadOnlyList<Indexed_columnContext> indexed_column() {
			return GetRuleContexts<Indexed_columnContext>();
		}
		public ITerminalNode K_FOREIGN() { return GetToken(PreSQLParser.K_FOREIGN, 0); }
		public ITerminalNode K_PRIMARY() { return GetToken(PreSQLParser.K_PRIMARY, 0); }
		public Indexed_columnContext indexed_column(int i) {
			return GetRuleContext<Indexed_columnContext>(i);
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public ITerminalNode K_CHECK() { return GetToken(PreSQLParser.K_CHECK, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(PreSQLParser.K_UNIQUE, 0); }
		public ITerminalNode K_KEY() { return GetToken(PreSQLParser.K_KEY, 0); }
		public ITerminalNode K_CONSTRAINT() { return GetToken(PreSQLParser.K_CONSTRAINT, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Conflict_clauseContext conflict_clause() {
			return GetRuleContext<Conflict_clauseContext>(0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterTable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitTable_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_constraintContext table_constraint() {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_table_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			_la = _input.La(1);
			if (_la==K_CONSTRAINT) {
				{
				State = 892; Match(K_CONSTRAINT);
				State = 893; name();
				}
			}

			State = 932;
			switch (_input.La(1)) {
			case K_PRIMARY:
			case K_UNIQUE:
				{
				State = 899;
				switch (_input.La(1)) {
				case K_PRIMARY:
					{
					State = 896; Match(K_PRIMARY);
					State = 897; Match(K_KEY);
					}
					break;
				case K_UNIQUE:
					{
					State = 898; Match(K_UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 901; Match(OPEN_PAR);
				State = 902; indexed_column();
				State = 907;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 903; Match(COMMA);
					State = 904; indexed_column();
					}
					}
					State = 909;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 910; Match(CLOSE_PAR);
				State = 911; conflict_clause();
				}
				break;
			case K_CHECK:
				{
				State = 913; Match(K_CHECK);
				State = 914; Match(OPEN_PAR);
				State = 915; expr(0);
				State = 916; Match(CLOSE_PAR);
				}
				break;
			case K_FOREIGN:
				{
				State = 918; Match(K_FOREIGN);
				State = 919; Match(K_KEY);
				State = 920; Match(OPEN_PAR);
				State = 921; column_name();
				State = 926;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 922; Match(COMMA);
					State = 923; column_name();
					}
					}
					State = 928;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 929; Match(CLOSE_PAR);
				State = 930; foreign_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		public ITerminalNode K_WITH() { return GetToken(PreSQLParser.K_WITH, 0); }
		public IReadOnlyList<ITerminalNode> K_AS() { return GetTokens(PreSQLParser.K_AS); }
		public ITerminalNode K_RECURSIVE() { return GetToken(PreSQLParser.K_RECURSIVE, 0); }
		public ITerminalNode K_AS(int i) {
			return GetToken(PreSQLParser.K_AS, i);
		}
		public Select_stmtContext select_stmt(int i) {
			return GetRuleContext<Select_stmtContext>(i);
		}
		public Cte_table_nameContext cte_table_name(int i) {
			return GetRuleContext<Cte_table_nameContext>(i);
		}
		public IReadOnlyList<Cte_table_nameContext> cte_table_name() {
			return GetRuleContexts<Cte_table_nameContext>();
		}
		public IReadOnlyList<Select_stmtContext> select_stmt() {
			return GetRuleContexts<Select_stmtContext>();
		}
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterWith_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitWith_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_with_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 934; Match(K_WITH);
			State = 936;
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 935; Match(K_RECURSIVE);
				}
				break;
			}
			State = 938; cte_table_name();
			State = 939; Match(K_AS);
			State = 940; Match(OPEN_PAR);
			State = 941; select_stmt();
			State = 942; Match(CLOSE_PAR);
			State = 952;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 943; Match(COMMA);
				State = 944; cte_table_name();
				State = 945; Match(K_AS);
				State = 946; Match(OPEN_PAR);
				State = 947; select_stmt();
				State = 948; Match(CLOSE_PAR);
				}
				}
				State = 954;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_table_nameContext : ParserRuleContext {
		public ITerminalNode K_INDEXED() { return GetToken(PreSQLParser.K_INDEXED, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode K_BY() { return GetToken(PreSQLParser.K_BY, 0); }
		public ITerminalNode K_NOT() { return GetToken(PreSQLParser.K_NOT, 0); }
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Qualified_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterQualified_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitQualified_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_table_nameContext qualified_table_name() {
		Qualified_table_nameContext _localctx = new Qualified_table_nameContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_qualified_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 958;
			switch ( Interpreter.AdaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				State = 955; database_name();
				State = 956; Match(DOT);
				}
				break;
			}
			State = 960; table_name();
			State = 966;
			switch (_input.La(1)) {
			case K_INDEXED:
				{
				State = 961; Match(K_INDEXED);
				State = 962; Match(K_BY);
				State = 963; index_name();
				}
				break;
			case K_NOT:
				{
				State = 964; Match(K_NOT);
				State = 965; Match(K_INDEXED);
				}
				break;
			case Eof:
			case SCOL:
			case K_ALTER:
			case K_COMMIT:
			case K_CREATE:
			case K_DELETE:
			case K_DROP:
			case K_END:
			case K_INSERT:
			case K_ROLLBACK:
			case K_SELECT:
			case K_SET:
			case K_UPDATE:
			case K_WHERE:
			case K_WITH:
			case K_CONNECT:
			case K_DISCONNECT:
			case UNEXPECTED_CHAR:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Collation_nameContext collation_name() {
			return GetRuleContext<Collation_nameContext>(0);
		}
		public ITerminalNode K_COLLATE() { return GetToken(PreSQLParser.K_COLLATE, 0); }
		public ITerminalNode K_DESC() { return GetToken(PreSQLParser.K_DESC, 0); }
		public ITerminalNode K_ASC() { return GetToken(PreSQLParser.K_ASC, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterOrdering_term(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitOrdering_term(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968; expr(0);
			State = 971;
			_la = _input.La(1);
			if (_la==K_COLLATE) {
				{
				State = 969; Match(K_COLLATE);
				State = 970; collation_name();
				}
			}

			State = 974;
			_la = _input.La(1);
			if (_la==K_ASC || _la==K_DESC) {
				{
				State = 973;
				_la = _input.La(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_expressionContext : ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode K_AS() { return GetToken(PreSQLParser.K_AS, 0); }
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterCommon_table_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitCommon_table_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_table_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_expressionContext common_table_expression() {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_common_table_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 976; table_name();
			State = 988;
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 977; Match(OPEN_PAR);
				State = 978; column_name();
				State = 983;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 979; Match(COMMA);
					State = 980; column_name();
					}
					}
					State = 985;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 986; Match(CLOSE_PAR);
				}
			}

			State = 990; Match(K_AS);
			State = 991; Match(OPEN_PAR);
			State = 992; select_stmt();
			State = 993; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		public ITerminalNode K_AS() { return GetToken(PreSQLParser.K_AS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterResult_column(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitResult_column(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_result_column);
		int _la;
		try {
			State = 1007;
			switch ( Interpreter.AdaptivePredict(_input,133,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 995; Match(STAR);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 996; table_name();
				State = 997; Match(DOT);
				State = 998; Match(STAR);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1000; expr(0);
				State = 1005;
				_la = _input.La(1);
				if (_la==K_AS || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 1002;
					_la = _input.La(1);
					if (_la==K_AS) {
						{
						State = 1001; Match(K_AS);
						}
					}

					State = 1004; column_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_subqueryContext : ParserRuleContext {
		public ITerminalNode K_INDEXED() { return GetToken(PreSQLParser.K_INDEXED, 0); }
		public ITerminalNode K_AS() { return GetToken(PreSQLParser.K_AS, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public IReadOnlyList<Table_or_subqueryContext> table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public ITerminalNode K_BY() { return GetToken(PreSQLParser.K_BY, 0); }
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_NOT() { return GetToken(PreSQLParser.K_NOT, 0); }
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Database_nameContext database_name() {
			return GetRuleContext<Database_nameContext>(0);
		}
		public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Table_or_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterTable_or_subquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitTable_or_subquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_subqueryContext table_or_subquery() {
		Table_or_subqueryContext _localctx = new Table_or_subqueryContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_table_or_subquery);
		int _la;
		try {
			State = 1056;
			switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1012;
				switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
				case 1:
					{
					State = 1009; database_name();
					State = 1010; Match(DOT);
					}
					break;
				}
				State = 1014; table_name();
				State = 1019;
				switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
				case 1:
					{
					State = 1016;
					switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
					case 1:
						{
						State = 1015; Match(K_AS);
						}
						break;
					}
					State = 1018; table_alias();
					}
					break;
				}
				State = 1026;
				switch (_input.La(1)) {
				case K_INDEXED:
					{
					State = 1021; Match(K_INDEXED);
					State = 1022; Match(K_BY);
					State = 1023; index_name();
					}
					break;
				case K_NOT:
					{
					State = 1024; Match(K_NOT);
					State = 1025; Match(K_INDEXED);
					}
					break;
				case Eof:
				case SCOL:
				case CLOSE_PAR:
				case COMMA:
				case K_ALTER:
				case K_COMMIT:
				case K_CREATE:
				case K_CROSS:
				case K_DELETE:
				case K_DROP:
				case K_END:
				case K_GROUP:
				case K_INNER:
				case K_INSERT:
				case K_JOIN:
				case K_LEFT:
				case K_NATURAL:
				case K_ON:
				case K_ORDER:
				case K_ROLLBACK:
				case K_SELECT:
				case K_UNION:
				case K_UPDATE:
				case K_USING:
				case K_WHERE:
				case K_WITH:
				case K_CONNECT:
				case K_DISCONNECT:
				case UNEXPECTED_CHAR:
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1028; Match(OPEN_PAR);
				State = 1038;
				switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
				case 1:
					{
					State = 1029; table_or_subquery();
					State = 1034;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1030; Match(COMMA);
						State = 1031; table_or_subquery();
						}
						}
						State = 1036;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;

				case 2:
					{
					State = 1037; join_clause();
					}
					break;
				}
				State = 1040; Match(CLOSE_PAR);
				State = 1045;
				switch ( Interpreter.AdaptivePredict(_input,141,_ctx) ) {
				case 1:
					{
					State = 1042;
					switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
					case 1:
						{
						State = 1041; Match(K_AS);
						}
						break;
					}
					State = 1044; table_alias();
					}
					break;
				}
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1047; Match(OPEN_PAR);
				State = 1048; select_stmt();
				State = 1049; Match(CLOSE_PAR);
				State = 1054;
				switch ( Interpreter.AdaptivePredict(_input,143,_ctx) ) {
				case 1:
					{
					State = 1051;
					switch ( Interpreter.AdaptivePredict(_input,142,_ctx) ) {
					case 1:
						{
						State = 1050; Match(K_AS);
						}
						break;
					}
					State = 1053; table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public IReadOnlyList<Join_operatorContext> join_operator() {
			return GetRuleContexts<Join_operatorContext>();
		}
		public Join_constraintContext join_constraint(int i) {
			return GetRuleContext<Join_constraintContext>(i);
		}
		public Join_operatorContext join_operator(int i) {
			return GetRuleContext<Join_operatorContext>(i);
		}
		public IReadOnlyList<Table_or_subqueryContext> table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public IReadOnlyList<Join_constraintContext> join_constraint() {
			return GetRuleContexts<Join_constraintContext>();
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1058; table_or_subquery();
			State = 1065;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA || _la==K_CROSS || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (K_INNER - 87)) | (1L << (K_JOIN - 87)) | (1L << (K_LEFT - 87)) | (1L << (K_NATURAL - 87)))) != 0)) {
				{
				{
				State = 1059; join_operator();
				State = 1060; table_or_subquery();
				State = 1061; join_constraint();
				}
				}
				State = 1067;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_operatorContext : ParserRuleContext {
		public ITerminalNode K_CROSS() { return GetToken(PreSQLParser.K_CROSS, 0); }
		public ITerminalNode K_OUTER() { return GetToken(PreSQLParser.K_OUTER, 0); }
		public ITerminalNode K_INNER() { return GetToken(PreSQLParser.K_INNER, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(PreSQLParser.K_NATURAL, 0); }
		public ITerminalNode K_JOIN() { return GetToken(PreSQLParser.K_JOIN, 0); }
		public ITerminalNode K_LEFT() { return GetToken(PreSQLParser.K_LEFT, 0); }
		public Join_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterJoin_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitJoin_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_operatorContext join_operator() {
		Join_operatorContext _localctx = new Join_operatorContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_join_operator);
		int _la;
		try {
			State = 1081;
			switch (_input.La(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1068; Match(COMMA);
				}
				break;
			case K_CROSS:
			case K_INNER:
			case K_JOIN:
			case K_LEFT:
			case K_NATURAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1070;
				_la = _input.La(1);
				if (_la==K_NATURAL) {
					{
					State = 1069; Match(K_NATURAL);
					}
				}

				State = 1078;
				switch (_input.La(1)) {
				case K_LEFT:
					{
					State = 1072; Match(K_LEFT);
					State = 1074;
					_la = _input.La(1);
					if (_la==K_OUTER) {
						{
						State = 1073; Match(K_OUTER);
						}
					}

					}
					break;
				case K_INNER:
					{
					State = 1076; Match(K_INNER);
					}
					break;
				case K_CROSS:
					{
					State = 1077; Match(K_CROSS);
					}
					break;
				case K_JOIN:
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1080; Match(K_JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_constraintContext : ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode K_ON() { return GetToken(PreSQLParser.K_ON, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public ITerminalNode K_USING() { return GetToken(PreSQLParser.K_USING, 0); }
		public Join_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterJoin_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitJoin_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_constraintContext join_constraint() {
		Join_constraintContext _localctx = new Join_constraintContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_join_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1097;
			switch (_input.La(1)) {
			case K_ON:
				{
				State = 1083; Match(K_ON);
				State = 1084; expr(0);
				}
				break;
			case K_USING:
				{
				State = 1085; Match(K_USING);
				State = 1086; Match(OPEN_PAR);
				State = 1087; column_name();
				State = 1092;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1088; Match(COMMA);
					State = 1089; column_name();
					}
					}
					State = 1094;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1095; Match(CLOSE_PAR);
				}
				break;
			case Eof:
			case SCOL:
			case CLOSE_PAR:
			case COMMA:
			case K_ALTER:
			case K_COMMIT:
			case K_CREATE:
			case K_CROSS:
			case K_DELETE:
			case K_DROP:
			case K_END:
			case K_GROUP:
			case K_INNER:
			case K_INSERT:
			case K_JOIN:
			case K_LEFT:
			case K_NATURAL:
			case K_ORDER:
			case K_ROLLBACK:
			case K_SELECT:
			case K_UNION:
			case K_UPDATE:
			case K_WHERE:
			case K_WITH:
			case K_CONNECT:
			case K_DISCONNECT:
			case UNEXPECTED_CHAR:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_coreContext : ParserRuleContext {
		public ITerminalNode K_WHERE() { return GetToken(PreSQLParser.K_WHERE, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IReadOnlyList<Result_columnContext> result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		public ITerminalNode K_FROM() { return GetToken(PreSQLParser.K_FROM, 0); }
		public Join_clauseContext join_clause() {
			return GetRuleContext<Join_clauseContext>(0);
		}
		public ITerminalNode K_ALL() { return GetToken(PreSQLParser.K_ALL, 0); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode K_GROUP() { return GetToken(PreSQLParser.K_GROUP, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(PreSQLParser.K_DISTINCT, 0); }
		public ITerminalNode K_HAVING() { return GetToken(PreSQLParser.K_HAVING, 0); }
		public ITerminalNode K_VALUES() { return GetToken(PreSQLParser.K_VALUES, 0); }
		public IReadOnlyList<Table_or_subqueryContext> table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		public ITerminalNode K_SELECT() { return GetToken(PreSQLParser.K_SELECT, 0); }
		public ITerminalNode K_BY() { return GetToken(PreSQLParser.K_BY, 0); }
		public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		public Select_coreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_core; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterSelect_core(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitSelect_core(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_core(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_coreContext select_core() {
		Select_coreContext _localctx = new Select_coreContext(_ctx, State);
		EnterRule(_localctx, 78, RULE_select_core);
		int _la;
		try {
			State = 1173;
			switch (_input.La(1)) {
			case K_SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1099; Match(K_SELECT);
				State = 1101;
				switch ( Interpreter.AdaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					State = 1100;
					_la = _input.La(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					_errHandler.RecoverInline(this);
					}
					Consume();
					}
					break;
				}
				State = 1103; result_column();
				State = 1108;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1104; Match(COMMA);
					State = 1105; result_column();
					}
					}
					State = 1110;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1123;
				_la = _input.La(1);
				if (_la==K_FROM) {
					{
					State = 1111; Match(K_FROM);
					State = 1121;
					switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
					case 1:
						{
						State = 1112; table_or_subquery();
						State = 1117;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==COMMA) {
							{
							{
							State = 1113; Match(COMMA);
							State = 1114; table_or_subquery();
							}
							}
							State = 1119;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						}
						break;

					case 2:
						{
						State = 1120; join_clause();
						}
						break;
					}
					}
				}

				State = 1127;
				_la = _input.La(1);
				if (_la==K_WHERE) {
					{
					State = 1125; Match(K_WHERE);
					State = 1126; expr(0);
					}
				}

				State = 1143;
				_la = _input.La(1);
				if (_la==K_GROUP) {
					{
					State = 1129; Match(K_GROUP);
					State = 1130; Match(K_BY);
					State = 1131; expr(0);
					State = 1136;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1132; Match(COMMA);
						State = 1133; expr(0);
						}
						}
						State = 1138;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 1141;
					_la = _input.La(1);
					if (_la==K_HAVING) {
						{
						State = 1139; Match(K_HAVING);
						State = 1140; expr(0);
						}
					}

					}
				}

				}
				break;
			case K_VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1145; Match(K_VALUES);
				State = 1146; Match(OPEN_PAR);
				State = 1147; expr(0);
				State = 1152;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1148; Match(COMMA);
					State = 1149; expr(0);
					}
					}
					State = 1154;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1155; Match(CLOSE_PAR);
				State = 1170;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1156; Match(COMMA);
					State = 1157; Match(OPEN_PAR);
					State = 1158; expr(0);
					State = 1163;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1159; Match(COMMA);
						State = 1160; expr(0);
						}
						}
						State = 1165;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 1166; Match(CLOSE_PAR);
					}
					}
					State = 1172;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cte_table_nameContext : ParserRuleContext {
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public IReadOnlyList<Column_nameContext> column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Cte_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cte_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterCte_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitCte_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCte_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cte_table_nameContext cte_table_name() {
		Cte_table_nameContext _localctx = new Cte_table_nameContext(_ctx, State);
		EnterRule(_localctx, 80, RULE_cte_table_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1175; table_name();
			State = 1187;
			_la = _input.La(1);
			if (_la==OPEN_PAR) {
				{
				State = 1176; Match(OPEN_PAR);
				State = 1177; column_name();
				State = 1182;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1178; Match(COMMA);
					State = 1179; column_name();
					}
					}
					State = 1184;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1185; Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(PreSQLParser.NUMERIC_LITERAL, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(_ctx, State);
		EnterRule(_localctx, 82, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1190;
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 1189;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 1192; Match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		public ITerminalNode K_CURRENT_DATE() { return GetToken(PreSQLParser.K_CURRENT_DATE, 0); }
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(PreSQLParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode K_NULL() { return GetToken(PreSQLParser.K_NULL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(PreSQLParser.STRING_LITERAL, 0); }
		public ITerminalNode K_CURRENT_TIMESTAMP() { return GetToken(PreSQLParser.K_CURRENT_TIMESTAMP, 0); }
		public ITerminalNode K_CURRENT_TIME() { return GetToken(PreSQLParser.K_CURRENT_TIME, 0); }
		public ITerminalNode BLOB_LITERAL() { return GetToken(PreSQLParser.BLOB_LITERAL, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1194;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CURRENT_DATE) | (1L << K_CURRENT_TIME) | (1L << K_CURRENT_TIMESTAMP))) != 0) || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (K_NULL - 104)) | (1L << (NUMERIC_LITERAL - 104)) | (1L << (STRING_LITERAL - 104)) | (1L << (BLOB_LITERAL - 104)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		public ITerminalNode K_NOT() { return GetToken(PreSQLParser.K_NOT, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1196;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << TILDE))) != 0) || _la==K_NOT) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_messageContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(PreSQLParser.STRING_LITERAL, 0); }
		public Error_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterError_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitError_message(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_message(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_messageContext error_message() {
		Error_messageContext _localctx = new Error_messageContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_error_message);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1198; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_argumentContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Column_defContext column_def() {
			return GetRuleContext<Column_defContext>(0);
		}
		public Module_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterModule_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitModule_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_argumentContext module_argument() {
		Module_argumentContext _localctx = new Module_argumentContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_module_argument);
		try {
			State = 1202;
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1200; expr(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1201; column_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(PreSQLParser.STRING_LITERAL, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(PreSQLParser.IDENTIFIER, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1204;
			_la = _input.La(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode K_INDEXED() { return GetToken(PreSQLParser.K_INDEXED, 0); }
		public ITerminalNode K_RECURSIVE() { return GetToken(PreSQLParser.K_RECURSIVE, 0); }
		public ITerminalNode K_DETACH() { return GetToken(PreSQLParser.K_DETACH, 0); }
		public ITerminalNode K_CASCADE() { return GetToken(PreSQLParser.K_CASCADE, 0); }
		public ITerminalNode K_COLLATE() { return GetToken(PreSQLParser.K_COLLATE, 0); }
		public ITerminalNode K_VACUUM() { return GetToken(PreSQLParser.K_VACUUM, 0); }
		public ITerminalNode K_COLUMN() { return GetToken(PreSQLParser.K_COLUMN, 0); }
		public ITerminalNode K_DROP() { return GetToken(PreSQLParser.K_DROP, 0); }
		public ITerminalNode K_VIEW() { return GetToken(PreSQLParser.K_VIEW, 0); }
		public ITerminalNode K_CONSTRAINT() { return GetToken(PreSQLParser.K_CONSTRAINT, 0); }
		public ITerminalNode K_TEMPORARY() { return GetToken(PreSQLParser.K_TEMPORARY, 0); }
		public ITerminalNode K_VIRTUAL() { return GetToken(PreSQLParser.K_VIRTUAL, 0); }
		public ITerminalNode K_AUTOINCREMENT() { return GetToken(PreSQLParser.K_AUTOINCREMENT, 0); }
		public ITerminalNode K_BEGIN() { return GetToken(PreSQLParser.K_BEGIN, 0); }
		public ITerminalNode K_OF() { return GetToken(PreSQLParser.K_OF, 0); }
		public ITerminalNode K_CROSS() { return GetToken(PreSQLParser.K_CROSS, 0); }
		public ITerminalNode K_CURRENT_DATE() { return GetToken(PreSQLParser.K_CURRENT_DATE, 0); }
		public ITerminalNode K_CREATE() { return GetToken(PreSQLParser.K_CREATE, 0); }
		public ITerminalNode K_IN() { return GetToken(PreSQLParser.K_IN, 0); }
		public ITerminalNode K_VALUES() { return GetToken(PreSQLParser.K_VALUES, 0); }
		public ITerminalNode K_UNION() { return GetToken(PreSQLParser.K_UNION, 0); }
		public ITerminalNode K_RAISE() { return GetToken(PreSQLParser.K_RAISE, 0); }
		public ITerminalNode K_ADD() { return GetToken(PreSQLParser.K_ADD, 0); }
		public ITerminalNode K_OFFSET() { return GetToken(PreSQLParser.K_OFFSET, 0); }
		public ITerminalNode K_REPLACE() { return GetToken(PreSQLParser.K_REPLACE, 0); }
		public ITerminalNode K_TRIGGER() { return GetToken(PreSQLParser.K_TRIGGER, 0); }
		public ITerminalNode K_SAVEPOINT() { return GetToken(PreSQLParser.K_SAVEPOINT, 0); }
		public ITerminalNode K_DATABASE() { return GetToken(PreSQLParser.K_DATABASE, 0); }
		public ITerminalNode K_INSERT() { return GetToken(PreSQLParser.K_INSERT, 0); }
		public ITerminalNode K_LIMIT() { return GetToken(PreSQLParser.K_LIMIT, 0); }
		public ITerminalNode K_COMMIT() { return GetToken(PreSQLParser.K_COMMIT, 0); }
		public ITerminalNode K_EXISTS() { return GetToken(PreSQLParser.K_EXISTS, 0); }
		public ITerminalNode K_CONFLICT() { return GetToken(PreSQLParser.K_CONFLICT, 0); }
		public ITerminalNode K_DESC() { return GetToken(PreSQLParser.K_DESC, 0); }
		public ITerminalNode K_TEMP() { return GetToken(PreSQLParser.K_TEMP, 0); }
		public ITerminalNode K_TO() { return GetToken(PreSQLParser.K_TO, 0); }
		public ITerminalNode K_TRANSACTION() { return GetToken(PreSQLParser.K_TRANSACTION, 0); }
		public ITerminalNode K_QUERY() { return GetToken(PreSQLParser.K_QUERY, 0); }
		public ITerminalNode K_IS() { return GetToken(PreSQLParser.K_IS, 0); }
		public ITerminalNode K_RELEASE() { return GetToken(PreSQLParser.K_RELEASE, 0); }
		public ITerminalNode K_DEFERRABLE() { return GetToken(PreSQLParser.K_DEFERRABLE, 0); }
		public ITerminalNode K_IGNORE() { return GetToken(PreSQLParser.K_IGNORE, 0); }
		public ITerminalNode K_SELECT() { return GetToken(PreSQLParser.K_SELECT, 0); }
		public ITerminalNode K_FOR() { return GetToken(PreSQLParser.K_FOR, 0); }
		public ITerminalNode K_EXCEPT() { return GetToken(PreSQLParser.K_EXCEPT, 0); }
		public ITerminalNode K_OR() { return GetToken(PreSQLParser.K_OR, 0); }
		public ITerminalNode K_BEFORE() { return GetToken(PreSQLParser.K_BEFORE, 0); }
		public ITerminalNode K_RENAME() { return GetToken(PreSQLParser.K_RENAME, 0); }
		public ITerminalNode K_INTO() { return GetToken(PreSQLParser.K_INTO, 0); }
		public ITerminalNode K_WHERE() { return GetToken(PreSQLParser.K_WHERE, 0); }
		public ITerminalNode K_INTERSECT() { return GetToken(PreSQLParser.K_INTERSECT, 0); }
		public ITerminalNode K_FROM() { return GetToken(PreSQLParser.K_FROM, 0); }
		public ITerminalNode K_EACH() { return GetToken(PreSQLParser.K_EACH, 0); }
		public ITerminalNode K_GLOB() { return GetToken(PreSQLParser.K_GLOB, 0); }
		public ITerminalNode K_ROLLBACK() { return GetToken(PreSQLParser.K_ROLLBACK, 0); }
		public ITerminalNode K_LEFT() { return GetToken(PreSQLParser.K_LEFT, 0); }
		public ITerminalNode K_FULL() { return GetToken(PreSQLParser.K_FULL, 0); }
		public ITerminalNode K_GROUP() { return GetToken(PreSQLParser.K_GROUP, 0); }
		public ITerminalNode K_REFERENCES() { return GetToken(PreSQLParser.K_REFERENCES, 0); }
		public ITerminalNode K_UPDATE() { return GetToken(PreSQLParser.K_UPDATE, 0); }
		public ITerminalNode K_ACTION() { return GetToken(PreSQLParser.K_ACTION, 0); }
		public ITerminalNode K_CURRENT_TIME() { return GetToken(PreSQLParser.K_CURRENT_TIME, 0); }
		public ITerminalNode K_END() { return GetToken(PreSQLParser.K_END, 0); }
		public ITerminalNode K_ASC() { return GetToken(PreSQLParser.K_ASC, 0); }
		public ITerminalNode K_THEN() { return GetToken(PreSQLParser.K_THEN, 0); }
		public ITerminalNode K_RESTRICT() { return GetToken(PreSQLParser.K_RESTRICT, 0); }
		public ITerminalNode K_FOREIGN() { return GetToken(PreSQLParser.K_FOREIGN, 0); }
		public ITerminalNode K_EXPLAIN() { return GetToken(PreSQLParser.K_EXPLAIN, 0); }
		public ITerminalNode K_INSTEAD() { return GetToken(PreSQLParser.K_INSTEAD, 0); }
		public ITerminalNode K_WITH() { return GetToken(PreSQLParser.K_WITH, 0); }
		public ITerminalNode K_ISNULL() { return GetToken(PreSQLParser.K_ISNULL, 0); }
		public ITerminalNode K_ORDER() { return GetToken(PreSQLParser.K_ORDER, 0); }
		public ITerminalNode K_OUTER() { return GetToken(PreSQLParser.K_OUTER, 0); }
		public ITerminalNode K_SET() { return GetToken(PreSQLParser.K_SET, 0); }
		public ITerminalNode K_UNIQUE() { return GetToken(PreSQLParser.K_UNIQUE, 0); }
		public ITerminalNode K_KEY() { return GetToken(PreSQLParser.K_KEY, 0); }
		public ITerminalNode K_CAST() { return GetToken(PreSQLParser.K_CAST, 0); }
		public ITerminalNode K_NO() { return GetToken(PreSQLParser.K_NO, 0); }
		public ITerminalNode K_AFTER() { return GetToken(PreSQLParser.K_AFTER, 0); }
		public ITerminalNode K_PLAN() { return GetToken(PreSQLParser.K_PLAN, 0); }
		public ITerminalNode K_ROW() { return GetToken(PreSQLParser.K_ROW, 0); }
		public ITerminalNode K_IMMEDIATE() { return GetToken(PreSQLParser.K_IMMEDIATE, 0); }
		public ITerminalNode K_PRIMARY() { return GetToken(PreSQLParser.K_PRIMARY, 0); }
		public ITerminalNode K_ON() { return GetToken(PreSQLParser.K_ON, 0); }
		public ITerminalNode K_DISTINCT() { return GetToken(PreSQLParser.K_DISTINCT, 0); }
		public ITerminalNode K_HAVING() { return GetToken(PreSQLParser.K_HAVING, 0); }
		public ITerminalNode K_ALTER() { return GetToken(PreSQLParser.K_ALTER, 0); }
		public ITerminalNode K_CURRENT_TIMESTAMP() { return GetToken(PreSQLParser.K_CURRENT_TIMESTAMP, 0); }
		public ITerminalNode K_NOTNULL() { return GetToken(PreSQLParser.K_NOTNULL, 0); }
		public ITerminalNode K_DEFAULT() { return GetToken(PreSQLParser.K_DEFAULT, 0); }
		public ITerminalNode K_INNER() { return GetToken(PreSQLParser.K_INNER, 0); }
		public ITerminalNode K_DELETE() { return GetToken(PreSQLParser.K_DELETE, 0); }
		public ITerminalNode K_RIGHT() { return GetToken(PreSQLParser.K_RIGHT, 0); }
		public ITerminalNode K_CASE() { return GetToken(PreSQLParser.K_CASE, 0); }
		public ITerminalNode K_MATCH() { return GetToken(PreSQLParser.K_MATCH, 0); }
		public ITerminalNode K_INITIALLY() { return GetToken(PreSQLParser.K_INITIALLY, 0); }
		public ITerminalNode K_EXCLUSIVE() { return GetToken(PreSQLParser.K_EXCLUSIVE, 0); }
		public ITerminalNode K_CHECK() { return GetToken(PreSQLParser.K_CHECK, 0); }
		public ITerminalNode K_NULL() { return GetToken(PreSQLParser.K_NULL, 0); }
		public ITerminalNode K_REINDEX() { return GetToken(PreSQLParser.K_REINDEX, 0); }
		public ITerminalNode K_BY() { return GetToken(PreSQLParser.K_BY, 0); }
		public ITerminalNode K_ABORT() { return GetToken(PreSQLParser.K_ABORT, 0); }
		public ITerminalNode K_WHEN() { return GetToken(PreSQLParser.K_WHEN, 0); }
		public ITerminalNode K_BETWEEN() { return GetToken(PreSQLParser.K_BETWEEN, 0); }
		public ITerminalNode K_REGEXP() { return GetToken(PreSQLParser.K_REGEXP, 0); }
		public ITerminalNode K_IF() { return GetToken(PreSQLParser.K_IF, 0); }
		public ITerminalNode K_TABLE() { return GetToken(PreSQLParser.K_TABLE, 0); }
		public ITerminalNode K_LIKE() { return GetToken(PreSQLParser.K_LIKE, 0); }
		public ITerminalNode K_DEFERRED() { return GetToken(PreSQLParser.K_DEFERRED, 0); }
		public ITerminalNode K_ANALYZE() { return GetToken(PreSQLParser.K_ANALYZE, 0); }
		public ITerminalNode K_JOIN() { return GetToken(PreSQLParser.K_JOIN, 0); }
		public ITerminalNode K_FAIL() { return GetToken(PreSQLParser.K_FAIL, 0); }
		public ITerminalNode K_PRAGMA() { return GetToken(PreSQLParser.K_PRAGMA, 0); }
		public ITerminalNode K_INDEX() { return GetToken(PreSQLParser.K_INDEX, 0); }
		public ITerminalNode K_AS() { return GetToken(PreSQLParser.K_AS, 0); }
		public ITerminalNode K_ELSE() { return GetToken(PreSQLParser.K_ELSE, 0); }
		public ITerminalNode K_ALL() { return GetToken(PreSQLParser.K_ALL, 0); }
		public ITerminalNode K_ATTACH() { return GetToken(PreSQLParser.K_ATTACH, 0); }
		public ITerminalNode K_AND() { return GetToken(PreSQLParser.K_AND, 0); }
		public ITerminalNode K_USING() { return GetToken(PreSQLParser.K_USING, 0); }
		public ITerminalNode K_WITHOUT() { return GetToken(PreSQLParser.K_WITHOUT, 0); }
		public ITerminalNode K_NATURAL() { return GetToken(PreSQLParser.K_NATURAL, 0); }
		public ITerminalNode K_NOT() { return GetToken(PreSQLParser.K_NOT, 0); }
		public ITerminalNode K_ESCAPE() { return GetToken(PreSQLParser.K_ESCAPE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206;
			_la = _input.La(1);
			if ( !(((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (K_ABORT - 25)) | (1L << (K_ACTION - 25)) | (1L << (K_ADD - 25)) | (1L << (K_AFTER - 25)) | (1L << (K_ALL - 25)) | (1L << (K_ALTER - 25)) | (1L << (K_ANALYZE - 25)) | (1L << (K_AND - 25)) | (1L << (K_AS - 25)) | (1L << (K_ASC - 25)) | (1L << (K_ATTACH - 25)) | (1L << (K_AUTOINCREMENT - 25)) | (1L << (K_BEFORE - 25)) | (1L << (K_BEGIN - 25)) | (1L << (K_BETWEEN - 25)) | (1L << (K_BY - 25)) | (1L << (K_CASCADE - 25)) | (1L << (K_CASE - 25)) | (1L << (K_CAST - 25)) | (1L << (K_CHECK - 25)) | (1L << (K_COLLATE - 25)) | (1L << (K_COLUMN - 25)) | (1L << (K_COMMIT - 25)) | (1L << (K_CONFLICT - 25)) | (1L << (K_CONSTRAINT - 25)) | (1L << (K_CREATE - 25)) | (1L << (K_CROSS - 25)) | (1L << (K_CURRENT_DATE - 25)) | (1L << (K_CURRENT_TIME - 25)) | (1L << (K_CURRENT_TIMESTAMP - 25)) | (1L << (K_DATABASE - 25)) | (1L << (K_DEFAULT - 25)) | (1L << (K_DEFERRABLE - 25)) | (1L << (K_DEFERRED - 25)) | (1L << (K_DELETE - 25)) | (1L << (K_DESC - 25)) | (1L << (K_DETACH - 25)) | (1L << (K_DISTINCT - 25)) | (1L << (K_DROP - 25)) | (1L << (K_EACH - 25)) | (1L << (K_ELSE - 25)) | (1L << (K_END - 25)) | (1L << (K_ESCAPE - 25)) | (1L << (K_EXCEPT - 25)) | (1L << (K_EXCLUSIVE - 25)) | (1L << (K_EXISTS - 25)) | (1L << (K_EXPLAIN - 25)) | (1L << (K_FAIL - 25)) | (1L << (K_FOR - 25)) | (1L << (K_FOREIGN - 25)) | (1L << (K_FROM - 25)) | (1L << (K_FULL - 25)) | (1L << (K_GLOB - 25)) | (1L << (K_GROUP - 25)) | (1L << (K_HAVING - 25)) | (1L << (K_IF - 25)) | (1L << (K_IGNORE - 25)) | (1L << (K_IMMEDIATE - 25)) | (1L << (K_IN - 25)) | (1L << (K_INDEX - 25)) | (1L << (K_INDEXED - 25)) | (1L << (K_INITIALLY - 25)) | (1L << (K_INNER - 25)) | (1L << (K_INSERT - 25)))) != 0) || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (K_INSTEAD - 89)) | (1L << (K_INTERSECT - 89)) | (1L << (K_INTO - 89)) | (1L << (K_IS - 89)) | (1L << (K_ISNULL - 89)) | (1L << (K_JOIN - 89)) | (1L << (K_KEY - 89)) | (1L << (K_LEFT - 89)) | (1L << (K_LIKE - 89)) | (1L << (K_LIMIT - 89)) | (1L << (K_MATCH - 89)) | (1L << (K_NATURAL - 89)) | (1L << (K_NO - 89)) | (1L << (K_NOT - 89)) | (1L << (K_NOTNULL - 89)) | (1L << (K_NULL - 89)) | (1L << (K_OF - 89)) | (1L << (K_OFFSET - 89)) | (1L << (K_ON - 89)) | (1L << (K_OR - 89)) | (1L << (K_ORDER - 89)) | (1L << (K_OUTER - 89)) | (1L << (K_PLAN - 89)) | (1L << (K_PRAGMA - 89)) | (1L << (K_PRIMARY - 89)) | (1L << (K_QUERY - 89)) | (1L << (K_RAISE - 89)) | (1L << (K_RECURSIVE - 89)) | (1L << (K_REFERENCES - 89)) | (1L << (K_REGEXP - 89)) | (1L << (K_REINDEX - 89)) | (1L << (K_RELEASE - 89)) | (1L << (K_RENAME - 89)) | (1L << (K_REPLACE - 89)) | (1L << (K_RESTRICT - 89)) | (1L << (K_RIGHT - 89)) | (1L << (K_ROLLBACK - 89)) | (1L << (K_ROW - 89)) | (1L << (K_SAVEPOINT - 89)) | (1L << (K_SELECT - 89)) | (1L << (K_SET - 89)) | (1L << (K_TABLE - 89)) | (1L << (K_TEMP - 89)) | (1L << (K_TEMPORARY - 89)) | (1L << (K_THEN - 89)) | (1L << (K_TO - 89)) | (1L << (K_TRANSACTION - 89)) | (1L << (K_TRIGGER - 89)) | (1L << (K_UNION - 89)) | (1L << (K_UNIQUE - 89)) | (1L << (K_UPDATE - 89)) | (1L << (K_USING - 89)) | (1L << (K_VACUUM - 89)) | (1L << (K_VALUES - 89)) | (1L << (K_VIEW - 89)) | (1L << (K_VIRTUAL - 89)) | (1L << (K_WHEN - 89)) | (1L << (K_WHERE - 89)) | (1L << (K_WITH - 89)) | (1L << (K_WITHOUT - 89)))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1208; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Database_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Database_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_database_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterDatabase_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitDatabase_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabase_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Database_nameContext database_name() {
		Database_nameContext _localctx = new Database_nameContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_database_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1212; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1214; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_or_index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterTable_or_index_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitTable_or_index_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_or_index_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_index_nameContext table_or_index_name() {
		Table_or_index_nameContext _localctx = new Table_or_index_nameContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_table_or_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1216; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class New_table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public New_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_new_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterNew_table_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitNew_table_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNew_table_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public New_table_nameContext new_table_name() {
		New_table_nameContext _localctx = new New_table_nameContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_new_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1220; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collation_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Collation_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collation_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterCollation_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitCollation_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollation_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collation_nameContext collation_name() {
		Collation_nameContext _localctx = new Collation_nameContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_collation_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_tableContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Foreign_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterForeign_table(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitForeign_table(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_tableContext foreign_table() {
		Foreign_tableContext _localctx = new Foreign_tableContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_foreign_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1224; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterIndex_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitIndex_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1226; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterTrigger_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitTrigger_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_nameContext trigger_name() {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_trigger_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1228; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterView_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitView_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_view_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1230; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Pragma_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterPragma_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitPragma_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_nameContext pragma_name() {
		Pragma_nameContext _localctx = new Pragma_nameContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_pragma_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1234; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterSavepoint_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitSavepoint_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_nameContext savepoint_name() {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_savepoint_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1236; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1238; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Transaction_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterTransaction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitTransaction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_nameContext transaction_name() {
		Transaction_nameContext _localctx = new Transaction_nameContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_transaction_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1240; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode STRING_LITERAL() { return GetToken(PreSQLParser.STRING_LITERAL, 0); }
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(PreSQLParser.IDENTIFIER, 0); }
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPreSQLListener typedListener = listener as IPreSQLListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreSQLVisitor<TResult> typedVisitor = visitor as IPreSQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_any_name);
		try {
			State = 1249;
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1242; Match(IDENTIFIER);
				}
				break;
			case K_ABORT:
			case K_ACTION:
			case K_ADD:
			case K_AFTER:
			case K_ALL:
			case K_ALTER:
			case K_ANALYZE:
			case K_AND:
			case K_AS:
			case K_ASC:
			case K_ATTACH:
			case K_AUTOINCREMENT:
			case K_BEFORE:
			case K_BEGIN:
			case K_BETWEEN:
			case K_BY:
			case K_CASCADE:
			case K_CASE:
			case K_CAST:
			case K_CHECK:
			case K_COLLATE:
			case K_COLUMN:
			case K_COMMIT:
			case K_CONFLICT:
			case K_CONSTRAINT:
			case K_CREATE:
			case K_CROSS:
			case K_CURRENT_DATE:
			case K_CURRENT_TIME:
			case K_CURRENT_TIMESTAMP:
			case K_DATABASE:
			case K_DEFAULT:
			case K_DEFERRABLE:
			case K_DEFERRED:
			case K_DELETE:
			case K_DESC:
			case K_DETACH:
			case K_DISTINCT:
			case K_DROP:
			case K_EACH:
			case K_ELSE:
			case K_END:
			case K_ESCAPE:
			case K_EXCEPT:
			case K_EXCLUSIVE:
			case K_EXISTS:
			case K_EXPLAIN:
			case K_FAIL:
			case K_FOR:
			case K_FOREIGN:
			case K_FROM:
			case K_FULL:
			case K_GLOB:
			case K_GROUP:
			case K_HAVING:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IN:
			case K_INDEX:
			case K_INDEXED:
			case K_INITIALLY:
			case K_INNER:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERSECT:
			case K_INTO:
			case K_IS:
			case K_ISNULL:
			case K_JOIN:
			case K_KEY:
			case K_LEFT:
			case K_LIKE:
			case K_LIMIT:
			case K_MATCH:
			case K_NATURAL:
			case K_NO:
			case K_NOT:
			case K_NOTNULL:
			case K_NULL:
			case K_OF:
			case K_OFFSET:
			case K_ON:
			case K_OR:
			case K_ORDER:
			case K_OUTER:
			case K_PLAN:
			case K_PRAGMA:
			case K_PRIMARY:
			case K_QUERY:
			case K_RAISE:
			case K_RECURSIVE:
			case K_REFERENCES:
			case K_REGEXP:
			case K_REINDEX:
			case K_RELEASE:
			case K_RENAME:
			case K_REPLACE:
			case K_RESTRICT:
			case K_RIGHT:
			case K_ROLLBACK:
			case K_ROW:
			case K_SAVEPOINT:
			case K_SELECT:
			case K_SET:
			case K_TABLE:
			case K_TEMP:
			case K_TEMPORARY:
			case K_THEN:
			case K_TO:
			case K_TRANSACTION:
			case K_TRIGGER:
			case K_UNION:
			case K_UNIQUE:
			case K_UPDATE:
			case K_USING:
			case K_VACUUM:
			case K_VALUES:
			case K_VIEW:
			case K_VIRTUAL:
			case K_WHEN:
			case K_WHERE:
			case K_WITH:
			case K_WITHOUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1243; keyword();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1244; Match(STRING_LITERAL);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1245; Match(OPEN_PAR);
				State = 1246; any_name();
				State = 1247; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 20);

		case 1: return Precpred(_ctx, 19);

		case 2: return Precpred(_ctx, 18);

		case 3: return Precpred(_ctx, 17);

		case 4: return Precpred(_ctx, 16);

		case 5: return Precpred(_ctx, 15);

		case 6: return Precpred(_ctx, 14);

		case 7: return Precpred(_ctx, 13);

		case 8: return Precpred(_ctx, 6);

		case 9: return Precpred(_ctx, 5);

		case 10: return Precpred(_ctx, 9);

		case 11: return Precpred(_ctx, 8);

		case 12: return Precpred(_ctx, 7);

		case 13: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xA1\x4E6\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x3\x2\x3\x2\a\x2\x89\n\x2"+
		"\f\x2\xE\x2\x8C\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x5\x4\xA4\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\xAB\n"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\xB3\n\x5\x3\x5\x5\x5\xB6"+
		"\n\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x5\b\xC0\n\b\x5\b\xC2"+
		"\n\b\x3\t\x3\t\x5\t\xC6\n\t\x3\t\x3\t\x3\t\x3\t\x5\t\xCC\n\t\x3\t\x3\t"+
		"\x3\t\x5\t\xD1\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\a\t\xDA\n\t\f\t"+
		"\xE\t\xDD\v\t\x3\t\x3\t\x3\t\x5\t\xE2\n\t\x3\n\x3\n\x5\n\xE6\n\n\x3\n"+
		"\x3\n\x3\n\x3\n\x5\n\xEC\n\n\x3\n\x3\n\x3\n\x5\n\xF1\n\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\a\n\xF8\n\n\f\n\xE\n\xFB\v\n\x3\n\x3\n\a\n\xFF\n\n\f\n\xE"+
		"\n\x102\v\n\x3\n\x3\n\x3\n\x5\n\x107\n\n\x3\n\x3\n\x5\n\x10B\n\n\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x5\v\x112\n\v\x3\v\x3\v\x3\v\x5\v\x117\n\v\x3\v\x3"+
		"\v\x5\v\x11B\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\x124\n\v\f\v\xE"+
		"\v\x127\v\v\x5\v\x129\n\v\x5\v\x12B\n\v\x3\v\x3\v\x3\v\x3\v\x5\v\x131"+
		"\n\v\x3\v\x3\v\x3\v\x3\v\x5\v\x137\n\v\x3\v\x3\v\x5\v\x13B\n\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x5\v\x142\n\v\x3\v\x3\v\x6\v\x146\n\v\r\v\xE\v\x147"+
		"\x3\v\x3\v\x3\f\x3\f\x5\f\x14E\n\f\x3\f\x3\f\x3\f\x3\f\x5\f\x154\n\f\x3"+
		"\f\x3\f\x3\f\x5\f\x159\n\f\x3\f\x3\f\x3\f\x3\f\x3\r\x5\r\x160\n\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x5\r\x167\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x16D"+
		"\n\xE\x3\xE\x3\xE\x3\xE\x5\xE\x172\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x5\xF\x17A\n\xF\x3\xF\x3\xF\x3\xF\x5\xF\x17F\n\xF\x3\xF\x3\xF\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x5\x10\x187\n\x10\x3\x10\x3\x10\x3\x10\x5\x10"+
		"\x18C\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x194\n\x11"+
		"\x3\x11\x3\x11\x3\x11\x5\x11\x199\n\x11\x3\x11\x3\x11\x3\x12\x5\x12\x19E"+
		"\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x1A5\n\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\a\x12\x1AC\n\x12\f\x12\xE\x12\x1AF\v\x12\x3"+
		"\x12\x3\x12\x5\x12\x1B3\n\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12"+
		"\x1BA\n\x12\f\x12\xE\x12\x1BD\v\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\a\x12\x1C5\n\x12\f\x12\xE\x12\x1C8\v\x12\x3\x12\x3\x12\a\x12\x1CC"+
		"\n\x12\f\x12\xE\x12\x1CF\v\x12\x3\x12\x3\x12\x3\x12\x5\x12\x1D4\n\x12"+
		"\x3\x13\x3\x13\x3\x13\x5\x13\x1D9\n\x13\x5\x13\x1DB\n\x13\x3\x13\x3\x13"+
		"\x5\x13\x1DF\n\x13\x3\x13\x5\x13\x1E2\n\x13\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x5\x14\x1E8\n\x14\x3\x14\a\x14\x1EB\n\x14\f\x14\xE\x14\x1EE\v\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\x1F5\n\x14\f\x14\xE\x14\x1F8\v"+
		"\x14\x5\x14\x1FA\n\x14\x3\x15\x3\x15\x5\x15\x1FE\n\x15\x3\x15\x3\x15\x3"+
		"\x15\a\x15\x203\n\x15\f\x15\xE\x15\x206\v\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\a\x15\x20C\n\x15\f\x15\xE\x15\x20F\v\x15\x3\x15\x5\x15\x212\n\x15"+
		"\x5\x15\x214\n\x15\x3\x15\x3\x15\x5\x15\x218\n\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\a\x15\x21F\n\x15\f\x15\xE\x15\x222\v\x15\x3\x15\x3\x15"+
		"\x5\x15\x226\n\x15\x5\x15\x228\n\x15\x3\x16\x5\x16\x22B\n\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a"+
		"\x16\x238\n\x16\f\x16\xE\x16\x23B\v\x16\x3\x16\x3\x16\x5\x16\x23F\n\x16"+
		"\x3\x17\x3\x17\x5\x17\x243\n\x17\x3\x17\a\x17\x246\n\x17\f\x17\xE\x17"+
		"\x249\v\x17\x3\x18\x6\x18\x24C\n\x18\r\x18\xE\x18\x24D\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x25A\n\x18"+
		"\x3\x19\x3\x19\x5\x19\x25E\n\x19\x3\x19\x3\x19\x3\x19\x5\x19\x263\n\x19"+
		"\x3\x19\x3\x19\x5\x19\x267\n\x19\x3\x19\x5\x19\x26A\n\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x27C\n\x19\x3\x19\x3\x19\x3\x19\x5"+
		"\x19\x281\n\x19\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x286\n\x1A\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x291\n\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x5\x1B\x296\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x29C"+
		"\n\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x2A1\n\x1B\f\x1B\xE\x1B\x2A4\v\x1B\x3"+
		"\x1B\x5\x1B\x2A7\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2B7\n\x1B\x3"+
		"\x1B\x5\x1B\x2BA\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x2C2\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x6\x1B\x2C9\n\x1B\r\x1B"+
		"\xE\x1B\x2CA\x3\x1B\x3\x1B\x5\x1B\x2CF\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x2D4\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5"+
		"\x1B\x2F2\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x5\x1B\x2FE\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x303\n\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x30F\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x315\n\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x31C\n\x1B\x3\x1B\x3\x1B\x5\x1B\x320"+
		"\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x328\n\x1B\f\x1B"+
		"\xE\x1B\x32B\v\x1B\x5\x1B\x32D\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B"+
		"\x333\n\x1B\x3\x1B\x5\x1B\x336\n\x1B\a\x1B\x338\n\x1B\f\x1B\xE\x1B\x33B"+
		"\v\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C\x343\n\x1C\f\x1C"+
		"\xE\x1C\x346\v\x1C\x3\x1C\x3\x1C\x5\x1C\x34A\n\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x356\n\x1C\x3"+
		"\x1C\x3\x1C\x5\x1C\x35A\n\x1C\a\x1C\x35C\n\x1C\f\x1C\xE\x1C\x35F\v\x1C"+
		"\x3\x1C\x5\x1C\x362\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x369"+
		"\n\x1C\x5\x1C\x36B\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5"+
		"\x1D\x373\n\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x37A\n\x1E\x3"+
		"\x1E\x5\x1E\x37D\n\x1E\x3\x1F\x3\x1F\x5\x1F\x381\n\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x5\x1F\x386\n\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x38C\n\x1F\f"+
		"\x1F\xE\x1F\x38F\v\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x39F\n\x1F\f\x1F"+
		"\xE\x1F\x3A2\v\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x3A7\n\x1F\x3 \x3 \x5 "+
		"\x3AB\n \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \a \x3B9\n \f"+
		" \xE \x3BC\v \x3!\x3!\x3!\x5!\x3C1\n!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x3C9"+
		"\n!\x3\"\x3\"\x3\"\x5\"\x3CE\n\"\x3\"\x5\"\x3D1\n\"\x3#\x3#\x3#\x3#\x3"+
		"#\a#\x3D8\n#\f#\xE#\x3DB\v#\x3#\x3#\x5#\x3DF\n#\x3#\x3#\x3#\x3#\x3#\x3"+
		"$\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x3ED\n$\x3$\x5$\x3F0\n$\x5$\x3F2\n$\x3%"+
		"\x3%\x3%\x5%\x3F7\n%\x3%\x3%\x5%\x3FB\n%\x3%\x5%\x3FE\n%\x3%\x3%\x3%\x3"+
		"%\x3%\x5%\x405\n%\x3%\x3%\x3%\x3%\a%\x40B\n%\f%\xE%\x40E\v%\x3%\x5%\x411"+
		"\n%\x3%\x3%\x5%\x415\n%\x3%\x5%\x418\n%\x3%\x3%\x3%\x3%\x5%\x41E\n%\x3"+
		"%\x5%\x421\n%\x5%\x423\n%\x3&\x3&\x3&\x3&\x3&\a&\x42A\n&\f&\xE&\x42D\v"+
		"&\x3\'\x3\'\x5\'\x431\n\'\x3\'\x3\'\x5\'\x435\n\'\x3\'\x3\'\x5\'\x439"+
		"\n\'\x3\'\x5\'\x43C\n\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\a(\x445\n(\f(\xE("+
		"\x448\v(\x3(\x3(\x5(\x44C\n(\x3)\x3)\x5)\x450\n)\x3)\x3)\x3)\a)\x455\n"+
		")\f)\xE)\x458\v)\x3)\x3)\x3)\x3)\a)\x45E\n)\f)\xE)\x461\v)\x3)\x5)\x464"+
		"\n)\x5)\x466\n)\x3)\x3)\x5)\x46A\n)\x3)\x3)\x3)\x3)\x3)\a)\x471\n)\f)"+
		"\xE)\x474\v)\x3)\x3)\x5)\x478\n)\x5)\x47A\n)\x3)\x3)\x3)\x3)\x3)\a)\x481"+
		"\n)\f)\xE)\x484\v)\x3)\x3)\x3)\x3)\x3)\x3)\a)\x48C\n)\f)\xE)\x48F\v)\x3"+
		")\x3)\a)\x493\n)\f)\xE)\x496\v)\x5)\x498\n)\x3*\x3*\x3*\x3*\x3*\a*\x49F"+
		"\n*\f*\xE*\x4A2\v*\x3*\x3*\x5*\x4A6\n*\x3+\x5+\x4A9\n+\x3+\x3+\x3,\x3"+
		",\x3-\x3-\x3.\x3.\x3/\x3/\x5/\x4B5\n/\x3\x30\x3\x30\x3\x31\x3\x31\x3\x32"+
		"\x3\x32\x3\x33\x3\x33\x3\x34\x3\x34\x3\x35\x3\x35\x3\x36\x3\x36\x3\x37"+
		"\x3\x37\x3\x38\x3\x38\x3\x39\x3\x39\x3:\x3:\x3;\x3;\x3<\x3<\x3=\x3=\x3"+
		">\x3>\x3?\x3?\x3@\x3@\x3\x41\x3\x41\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x4E4\n\x43\x3\x43\x2\x2\x3\x34\x44"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2"+
		"\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2"+
		"N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2"+
		"l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x2\x13\x4"+
		"\x2\x31\x31\x44\x44\x3\x2\x85\x86\x4\x2\x1E\x1E\'\'\x4\x2\x1F\x1F@@\x4"+
		"\x2$$>>\a\x2\x1B\x1BJJSS||\x7F\x7F\x4\x2\t\t\xE\xF\x3\x2\n\v\x3\x2\x10"+
		"\x13\x3\x2\x14\x17\x6\x2OO\x63\x63\x65\x65xx\x4\x2==\x8D\x8D\x5\x2\x1B"+
		"\x1BJJ\x7F\x7F\x6\x2\x36\x38jj\x9A\x9A\x9C\x9D\x4\x2\n\fhh\x4\x2\x99\x99"+
		"\x9C\x9C\x3\x2\x1B\x96\x595\x2\x8A\x3\x2\x2\x2\x4\x8F\x3\x2\x2\x2\x6\xA3"+
		"\x3\x2\x2\x2\b\xA5\x3\x2\x2\x2\n\xB7\x3\x2\x2\x2\f\xBA\x3\x2\x2\x2\xE"+
		"\xBC\x3\x2\x2\x2\x10\xC3\x3\x2\x2\x2\x12\xE3\x3\x2\x2\x2\x14\x10C\x3\x2"+
		"\x2\x2\x16\x14B\x3\x2\x2\x2\x18\x15F\x3\x2\x2\x2\x1A\x168\x3\x2\x2\x2"+
		"\x1C\x175\x3\x2\x2\x2\x1E\x182\x3\x2\x2\x2 \x18F\x3\x2\x2\x2\"\x19D\x3"+
		"\x2\x2\x2$\x1D5\x3\x2\x2\x2&\x1E3\x3\x2\x2\x2(\x1FB\x3\x2\x2\x2*\x22A"+
		"\x3\x2\x2\x2,\x240\x3\x2\x2\x2.\x24B\x3\x2\x2\x2\x30\x25D\x3\x2\x2\x2"+
		"\x32\x285\x3\x2\x2\x2\x34\x2D3\x3\x2\x2\x2\x36\x33C\x3\x2\x2\x2\x38\x36C"+
		"\x3\x2\x2\x2:\x376\x3\x2\x2\x2<\x380\x3\x2\x2\x2>\x3A8\x3\x2\x2\x2@\x3C0"+
		"\x3\x2\x2\x2\x42\x3CA\x3\x2\x2\x2\x44\x3D2\x3\x2\x2\x2\x46\x3F1\x3\x2"+
		"\x2\x2H\x422\x3\x2\x2\x2J\x424\x3\x2\x2\x2L\x43B\x3\x2\x2\x2N\x44B\x3"+
		"\x2\x2\x2P\x497\x3\x2\x2\x2R\x499\x3\x2\x2\x2T\x4A8\x3\x2\x2\x2V\x4AC"+
		"\x3\x2\x2\x2X\x4AE\x3\x2\x2\x2Z\x4B0\x3\x2\x2\x2\\\x4B4\x3\x2\x2\x2^\x4B6"+
		"\x3\x2\x2\x2`\x4B8\x3\x2\x2\x2\x62\x4BA\x3\x2\x2\x2\x64\x4BC\x3\x2\x2"+
		"\x2\x66\x4BE\x3\x2\x2\x2h\x4C0\x3\x2\x2\x2j\x4C2\x3\x2\x2\x2l\x4C4\x3"+
		"\x2\x2\x2n\x4C6\x3\x2\x2\x2p\x4C8\x3\x2\x2\x2r\x4CA\x3\x2\x2\x2t\x4CC"+
		"\x3\x2\x2\x2v\x4CE\x3\x2\x2\x2x\x4D0\x3\x2\x2\x2z\x4D2\x3\x2\x2\x2|\x4D4"+
		"\x3\x2\x2\x2~\x4D6\x3\x2\x2\x2\x80\x4D8\x3\x2\x2\x2\x82\x4DA\x3\x2\x2"+
		"\x2\x84\x4E3\x3\x2\x2\x2\x86\x89\x5\x6\x4\x2\x87\x89\x5\x4\x3\x2\x88\x86"+
		"\x3\x2\x2\x2\x88\x87\x3\x2\x2\x2\x89\x8C\x3\x2\x2\x2\x8A\x88\x3\x2\x2"+
		"\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8D\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8D\x8E"+
		"\a\x2\x2\x3\x8E\x3\x3\x2\x2\x2\x8F\x90\a\xA1\x2\x2\x90\x91\b\x3\x1\x2"+
		"\x91\x5\x3\x2\x2\x2\x92\xA4\x5\b\x5\x2\x93\xA4\x5\n\x6\x2\x94\xA4\x5\xE"+
		"\b\x2\x95\xA4\x5\x10\t\x2\x96\xA4\x5\x12\n\x2\x97\xA4\x5\x14\v\x2\x98"+
		"\xA4\x5\x16\f\x2\x99\xA4\x5\x18\r\x2\x9A\xA4\x5\f\a\x2\x9B\xA4\x5\x1A"+
		"\xE\x2\x9C\xA4\x5\x1C\xF\x2\x9D\xA4\x5\x1E\x10\x2\x9E\xA4\x5 \x11\x2\x9F"+
		"\xA4\x5\"\x12\x2\xA0\xA4\x5$\x13\x2\xA1\xA4\x5&\x14\x2\xA2\xA4\x5*\x16"+
		"\x2\xA3\x92\x3\x2\x2\x2\xA3\x93\x3\x2\x2\x2\xA3\x94\x3\x2\x2\x2\xA3\x95"+
		"\x3\x2\x2\x2\xA3\x96\x3\x2\x2\x2\xA3\x97\x3\x2\x2\x2\xA3\x98\x3\x2\x2"+
		"\x2\xA3\x99\x3\x2\x2\x2\xA3\x9A\x3\x2\x2\x2\xA3\x9B\x3\x2\x2\x2\xA3\x9C"+
		"\x3\x2\x2\x2\xA3\x9D\x3\x2\x2\x2\xA3\x9E\x3\x2\x2\x2\xA3\x9F\x3\x2\x2"+
		"\x2\xA3\xA0\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA3\xA2\x3\x2\x2\x2\xA4\a"+
		"\x3\x2\x2\x2\xA5\xA6\a \x2\x2\xA6\xAA\a\x84\x2\x2\xA7\xA8\x5\x66\x34\x2"+
		"\xA8\xA9\a\x4\x2\x2\xA9\xAB\x3\x2\x2\x2\xAA\xA7\x3\x2\x2\x2\xAA\xAB\x3"+
		"\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xB5\x5h\x35\x2\xAD\xAE\a{\x2\x2\xAE"+
		"\xAF\a\x88\x2\x2\xAF\xB6\x5l\x37\x2\xB0\xB2\a\x1D\x2\x2\xB1\xB3\a\x30"+
		"\x2\x2\xB2\xB1\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4"+
		"\xB6\x5,\x17\x2\xB5\xAD\x3\x2\x2\x2\xB5\xB0\x3\x2\x2\x2\xB6\t\x3\x2\x2"+
		"\x2\xB7\xB8\a\x97\x2\x2\xB8\xB9\x5\x66\x34\x2\xB9\v\x3\x2\x2\x2\xBA\xBB"+
		"\a\x98\x2\x2\xBB\r\x3\x2\x2\x2\xBC\xC1\t\x2\x2\x2\xBD\xBF\a\x89\x2\x2"+
		"\xBE\xC0\x5\x82\x42\x2\xBF\xBE\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC2"+
		"\x3\x2\x2\x2\xC1\xBD\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xF\x3\x2\x2\x2"+
		"\xC3\xC5\a\x34\x2\x2\xC4\xC6\a\x8C\x2\x2\xC5\xC4\x3\x2\x2\x2\xC5\xC6\x3"+
		"\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xCB\aV\x2\x2\xC8\xC9\aR\x2\x2\xC9\xCA"+
		"\ah\x2\x2\xCA\xCC\aH\x2\x2\xCB\xC8\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC"+
		"\xD0\x3\x2\x2\x2\xCD\xCE\x5\x66\x34\x2\xCE\xCF\a\x4\x2\x2\xCF\xD1\x3\x2"+
		"\x2\x2\xD0\xCD\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2"+
		"\xD3\x5t;\x2\xD3\xD4\am\x2\x2\xD4\xD5\x5h\x35\x2\xD5\xD6\a\x5\x2\x2\xD6"+
		"\xDB\x5:\x1E\x2\xD7\xD8\a\a\x2\x2\xD8\xDA\x5:\x1E\x2\xD9\xD7\x3\x2\x2"+
		"\x2\xDA\xDD\x3\x2\x2\x2\xDB\xD9\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDE"+
		"\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDE\xE1\a\x6\x2\x2\xDF\xE0\a\x94\x2\x2"+
		"\xE0\xE2\x5\x34\x1B\x2\xE1\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\x11"+
		"\x3\x2\x2\x2\xE3\xE5\a\x34\x2\x2\xE4\xE6\t\x3\x2\x2\xE5\xE4\x3\x2\x2\x2"+
		"\xE5\xE6\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\xEB\a\x84\x2\x2\xE8\xE9\a"+
		"R\x2\x2\xE9\xEA\ah\x2\x2\xEA\xEC\aH\x2\x2\xEB\xE8\x3\x2\x2\x2\xEB\xEC"+
		"\x3\x2\x2\x2\xEC\xF0\x3\x2\x2\x2\xED\xEE\x5\x66\x34\x2\xEE\xEF\a\x4\x2"+
		"\x2\xEF\xF1\x3\x2\x2\x2\xF0\xED\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xF2"+
		"\x3\x2\x2\x2\xF2\x10A\x5h\x35\x2\xF3\xF4\a\x5\x2\x2\xF4\xF9\x5,\x17\x2"+
		"\xF5\xF6\a\a\x2\x2\xF6\xF8\x5,\x17\x2\xF7\xF5\x3\x2\x2\x2\xF8\xFB\x3\x2"+
		"\x2\x2\xF9\xF7\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\x100\x3\x2\x2\x2\xFB"+
		"\xF9\x3\x2\x2\x2\xFC\xFD\a\a\x2\x2\xFD\xFF\x5<\x1F\x2\xFE\xFC\x3\x2\x2"+
		"\x2\xFF\x102\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101"+
		"\x103\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x103\x106\a\x6\x2\x2\x104\x105"+
		"\a\x96\x2\x2\x105\x107\a\x99\x2\x2\x106\x104\x3\x2\x2\x2\x106\x107\x3"+
		"\x2\x2\x2\x107\x10B\x3\x2\x2\x2\x108\x109\a#\x2\x2\x109\x10B\x5&\x14\x2"+
		"\x10A\xF3\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10B\x13\x3\x2\x2\x2\x10C"+
		"\x10D\a\x34\x2\x2\x10D\x111\a\x8A\x2\x2\x10E\x10F\aR\x2\x2\x10F\x110\a"+
		"h\x2\x2\x110\x112\aH\x2\x2\x111\x10E\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2"+
		"\x112\x116\x3\x2\x2\x2\x113\x114\x5\x66\x34\x2\x114\x115\a\x4\x2\x2\x115"+
		"\x117\x3\x2\x2\x2\x116\x113\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117\x118"+
		"\x3\x2\x2\x2\x118\x11A\x5v<\x2\x119\x11B\t\x4\x2\x2\x11A\x119\x3\x2\x2"+
		"\x2\x11A\x11B\x3\x2\x2\x2\x11B\x12A\x3\x2\x2\x2\x11C\x12B\a=\x2\x2\x11D"+
		"\x12B\aZ\x2\x2\x11E\x128\a\x8D\x2\x2\x11F\x120\ak\x2\x2\x120\x125\x5n"+
		"\x38\x2\x121\x122\a\a\x2\x2\x122\x124\x5n\x38\x2\x123\x121\x3\x2\x2\x2"+
		"\x124\x127\x3\x2\x2\x2\x125\x123\x3\x2\x2\x2\x125\x126\x3\x2\x2\x2\x126"+
		"\x129\x3\x2\x2\x2\x127\x125\x3\x2\x2\x2\x128\x11F\x3\x2\x2\x2\x128\x129"+
		"\x3\x2\x2\x2\x129\x12B\x3\x2\x2\x2\x12A\x11C\x3\x2\x2\x2\x12A\x11D\x3"+
		"\x2\x2\x2\x12A\x11E\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x130\am\x2"+
		"\x2\x12D\x12E\x5\x66\x34\x2\x12E\x12F\a\x4\x2\x2\x12F\x131\x3\x2\x2\x2"+
		"\x130\x12D\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132"+
		"\x136\x5h\x35\x2\x133\x134\aK\x2\x2\x134\x135\a\x42\x2\x2\x135\x137\a"+
		"\x80\x2\x2\x136\x133\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137\x13A\x3\x2"+
		"\x2\x2\x138\x139\a\x93\x2\x2\x139\x13B\x5\x34\x1B\x2\x13A\x138\x3\x2\x2"+
		"\x2\x13A\x13B\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x145\a(\x2\x2\x13D"+
		"\x142\x5*\x16\x2\x13E\x142\x5\"\x12\x2\x13F\x142\x5\x18\r\x2\x140\x142"+
		"\x5&\x14\x2\x141\x13D\x3\x2\x2\x2\x141\x13E\x3\x2\x2\x2\x141\x13F\x3\x2"+
		"\x2\x2\x141\x140\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x144\a\x3\x2\x2"+
		"\x144\x146\x3\x2\x2\x2\x145\x141\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147"+
		"\x145\x3\x2\x2\x2\x147\x148\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14A"+
		"\a\x44\x2\x2\x14A\x15\x3\x2\x2\x2\x14B\x14D\a\x34\x2\x2\x14C\x14E\t\x3"+
		"\x2\x2\x14D\x14C\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E\x14F\x3\x2\x2"+
		"\x2\x14F\x153\a\x91\x2\x2\x150\x151\aR\x2\x2\x151\x152\ah\x2\x2\x152\x154"+
		"\aH\x2\x2\x153\x150\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x158\x3\x2"+
		"\x2\x2\x155\x156\x5\x66\x34\x2\x156\x157\a\x4\x2\x2\x157\x159\x3\x2\x2"+
		"\x2\x158\x155\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2"+
		"\x15A\x15B\x5x=\x2\x15B\x15C\a#\x2\x2\x15C\x15D\x5&\x14\x2\x15D\x17\x3"+
		"\x2\x2\x2\x15E\x160\x5> \x2\x15F\x15E\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2"+
		"\x160\x161\x3\x2\x2\x2\x161\x162\a=\x2\x2\x162\x163\aM\x2\x2\x163\x166"+
		"\x5@!\x2\x164\x165\a\x94\x2\x2\x165\x167\x5\x34\x1B\x2\x166\x164\x3\x2"+
		"\x2\x2\x166\x167\x3\x2\x2\x2\x167\x19\x3\x2\x2\x2\x168\x169\a\x41\x2\x2"+
		"\x169\x16C\aV\x2\x2\x16A\x16B\aR\x2\x2\x16B\x16D\aH\x2\x2\x16C\x16A\x3"+
		"\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x171\x3\x2\x2\x2\x16E\x16F\x5\x66"+
		"\x34\x2\x16F\x170\a\x4\x2\x2\x170\x172\x3\x2\x2\x2\x171\x16E\x3\x2\x2"+
		"\x2\x171\x172\x3\x2\x2\x2\x172\x173\x3\x2\x2\x2\x173\x174\x5t;\x2\x174"+
		"\x1B\x3\x2\x2\x2\x175\x176\a\x41\x2\x2\x176\x179\a\x84\x2\x2\x177\x178"+
		"\aR\x2\x2\x178\x17A\aH\x2\x2\x179\x177\x3\x2\x2\x2\x179\x17A\x3\x2\x2"+
		"\x2\x17A\x17E\x3\x2\x2\x2\x17B\x17C\x5\x66\x34\x2\x17C\x17D\a\x4\x2\x2"+
		"\x17D\x17F\x3\x2\x2\x2\x17E\x17B\x3\x2\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F"+
		"\x180\x3\x2\x2\x2\x180\x181\x5h\x35\x2\x181\x1D\x3\x2\x2\x2\x182\x183"+
		"\a\x41\x2\x2\x183\x186\a\x8A\x2\x2\x184\x185\aR\x2\x2\x185\x187\aH\x2"+
		"\x2\x186\x184\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\x18B\x3\x2\x2\x2"+
		"\x188\x189\x5\x66\x34\x2\x189\x18A\a\x4\x2\x2\x18A\x18C\x3\x2\x2\x2\x18B"+
		"\x188\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2\x18C\x18D\x3\x2\x2\x2\x18D\x18E"+
		"\x5v<\x2\x18E\x1F\x3\x2\x2\x2\x18F\x190\a\x41\x2\x2\x190\x193\a\x91\x2"+
		"\x2\x191\x192\aR\x2\x2\x192\x194\aH\x2\x2\x193\x191\x3\x2\x2\x2\x193\x194"+
		"\x3\x2\x2\x2\x194\x198\x3\x2\x2\x2\x195\x196\x5\x66\x34\x2\x196\x197\a"+
		"\x4\x2\x2\x197\x199\x3\x2\x2\x2\x198\x195\x3\x2\x2\x2\x198\x199\x3\x2"+
		"\x2\x2\x199\x19A\x3\x2\x2\x2\x19A\x19B\x5x=\x2\x19B!\x3\x2\x2\x2\x19C"+
		"\x19E\x5> \x2\x19D\x19C\x3\x2\x2\x2\x19D\x19E\x3\x2\x2\x2\x19E\x19F\x3"+
		"\x2\x2\x2\x19F\x1A0\aZ\x2\x2\x1A0\x1A4\a]\x2\x2\x1A1\x1A2\x5\x66\x34\x2"+
		"\x1A2\x1A3\a\x4\x2\x2\x1A3\x1A5\x3\x2\x2\x2\x1A4\x1A1\x3\x2\x2\x2\x1A4"+
		"\x1A5\x3\x2\x2\x2\x1A5\x1A6\x3\x2\x2\x2\x1A6\x1B2\x5h\x35\x2\x1A7\x1A8"+
		"\a\x5\x2\x2\x1A8\x1AD\x5n\x38\x2\x1A9\x1AA\a\a\x2\x2\x1AA\x1AC\x5n\x38"+
		"\x2\x1AB\x1A9\x3\x2\x2\x2\x1AC\x1AF\x3\x2\x2\x2\x1AD\x1AB\x3\x2\x2\x2"+
		"\x1AD\x1AE\x3\x2\x2\x2\x1AE\x1B0\x3\x2\x2\x2\x1AF\x1AD\x3\x2\x2\x2\x1B0"+
		"\x1B1\a\x6\x2\x2\x1B1\x1B3\x3\x2\x2\x2\x1B2\x1A7\x3\x2\x2\x2\x1B2\x1B3"+
		"\x3\x2\x2\x2\x1B3\x1D3\x3\x2\x2\x2\x1B4\x1B5\a\x90\x2\x2\x1B5\x1B6\a\x5"+
		"\x2\x2\x1B6\x1BB\x5\x34\x1B\x2\x1B7\x1B8\a\a\x2\x2\x1B8\x1BA\x5\x34\x1B"+
		"\x2\x1B9\x1B7\x3\x2\x2\x2\x1BA\x1BD\x3\x2\x2\x2\x1BB\x1B9\x3\x2\x2\x2"+
		"\x1BB\x1BC\x3\x2\x2\x2\x1BC\x1BE\x3\x2\x2\x2\x1BD\x1BB\x3\x2\x2\x2\x1BE"+
		"\x1CD\a\x6\x2\x2\x1BF\x1C0\a\a\x2\x2\x1C0\x1C1\a\x5\x2\x2\x1C1\x1C6\x5"+
		"\x34\x1B\x2\x1C2\x1C3\a\a\x2\x2\x1C3\x1C5\x5\x34\x1B\x2\x1C4\x1C2\x3\x2"+
		"\x2\x2\x1C5\x1C8\x3\x2\x2\x2\x1C6\x1C4\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2"+
		"\x2\x1C7\x1C9\x3\x2\x2\x2\x1C8\x1C6\x3\x2\x2\x2\x1C9\x1CA\a\x6\x2\x2\x1CA"+
		"\x1CC\x3\x2\x2\x2\x1CB\x1BF\x3\x2\x2\x2\x1CC\x1CF\x3\x2\x2\x2\x1CD\x1CB"+
		"\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1D4\x3\x2\x2\x2\x1CF\x1CD\x3"+
		"\x2\x2\x2\x1D0\x1D4\x5&\x14\x2\x1D1\x1D2\a:\x2\x2\x1D2\x1D4\a\x90\x2\x2"+
		"\x1D3\x1B4\x3\x2\x2\x2\x1D3\x1D0\x3\x2\x2\x2\x1D3\x1D1\x3\x2\x2\x2\x1D4"+
		"#\x3\x2\x2\x2\x1D5\x1DA\a\x7F\x2\x2\x1D6\x1D8\a\x89\x2\x2\x1D7\x1D9\x5"+
		"\x82\x42\x2\x1D8\x1D7\x3\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9\x1DB\x3\x2"+
		"\x2\x2\x1DA\x1D6\x3\x2\x2\x2\x1DA\x1DB\x3\x2\x2\x2\x1DB\x1E1\x3\x2\x2"+
		"\x2\x1DC\x1DE\a\x88\x2\x2\x1DD\x1DF\a\x81\x2\x2\x1DE\x1DD\x3\x2\x2\x2"+
		"\x1DE\x1DF\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E2\x5~@\x2\x1E1\x1DC"+
		"\x3\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2%\x3\x2\x2\x2\x1E3\x1EC\x5(\x15"+
		"\x2\x1E4\x1E8\a\x8B\x2\x2\x1E5\x1E6\a\x8B\x2\x2\x1E6\x1E8\a\x1F\x2\x2"+
		"\x1E7\x1E4\x3\x2\x2\x2\x1E7\x1E5\x3\x2\x2\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9"+
		"\x1EB\x5(\x15\x2\x1EA\x1E7\x3\x2\x2\x2\x1EB\x1EE\x3\x2\x2\x2\x1EC\x1EA"+
		"\x3\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2\x1ED\x1F9\x3\x2\x2\x2\x1EE\x1EC\x3"+
		"\x2\x2\x2\x1EF\x1F0\ao\x2\x2\x1F0\x1F1\a*\x2\x2\x1F1\x1F6\x5\x42\"\x2"+
		"\x1F2\x1F3\a\a\x2\x2\x1F3\x1F5\x5\x42\"\x2\x1F4\x1F2\x3\x2\x2\x2\x1F5"+
		"\x1F8\x3\x2\x2\x2\x1F6\x1F4\x3\x2\x2\x2\x1F6\x1F7\x3\x2\x2\x2\x1F7\x1FA"+
		"\x3\x2\x2\x2\x1F8\x1F6\x3\x2\x2\x2\x1F9\x1EF\x3\x2\x2\x2\x1F9\x1FA\x3"+
		"\x2\x2\x2\x1FA\'\x3\x2\x2\x2\x1FB\x1FD\a\x82\x2\x2\x1FC\x1FE\t\x5\x2\x2"+
		"\x1FD\x1FC\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF"+
		"\x204\x5\x46$\x2\x200\x201\a\a\x2\x2\x201\x203\x5\x46$\x2\x202\x200\x3"+
		"\x2\x2\x2\x203\x206\x3\x2\x2\x2\x204\x202\x3\x2\x2\x2\x204\x205\x3\x2"+
		"\x2\x2\x205\x213\x3\x2\x2\x2\x206\x204\x3\x2\x2\x2\x207\x211\aM\x2\x2"+
		"\x208\x20D\x5H%\x2\x209\x20A\a\a\x2\x2\x20A\x20C\x5H%\x2\x20B\x209\x3"+
		"\x2\x2\x2\x20C\x20F\x3\x2\x2\x2\x20D\x20B\x3\x2\x2\x2\x20D\x20E\x3\x2"+
		"\x2\x2\x20E\x212\x3\x2\x2\x2\x20F\x20D\x3\x2\x2\x2\x210\x212\x5J&\x2\x211"+
		"\x208\x3\x2\x2\x2\x211\x210\x3\x2\x2\x2\x212\x214\x3\x2\x2\x2\x213\x207"+
		"\x3\x2\x2\x2\x213\x214\x3\x2\x2\x2\x214\x217\x3\x2\x2\x2\x215\x216\a\x94"+
		"\x2\x2\x216\x218\x5\x34\x1B\x2\x217\x215\x3\x2\x2\x2\x217\x218\x3\x2\x2"+
		"\x2\x218\x227\x3\x2\x2\x2\x219\x21A\aP\x2\x2\x21A\x21B\a*\x2\x2\x21B\x220"+
		"\x5\x34\x1B\x2\x21C\x21D\a\a\x2\x2\x21D\x21F\x5\x34\x1B\x2\x21E\x21C\x3"+
		"\x2\x2\x2\x21F\x222\x3\x2\x2\x2\x220\x21E\x3\x2\x2\x2\x220\x221\x3\x2"+
		"\x2\x2\x221\x225\x3\x2\x2\x2\x222\x220\x3\x2\x2\x2\x223\x224\aQ\x2\x2"+
		"\x224\x226\x5\x34\x1B\x2\x225\x223\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226"+
		"\x228\x3\x2\x2\x2\x227\x219\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228)\x3"+
		"\x2\x2\x2\x229\x22B\x5> \x2\x22A\x229\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2"+
		"\x22B\x22C\x3\x2\x2\x2\x22C\x22D\a\x8D\x2\x2\x22D\x22E\x5@!\x2\x22E\x22F"+
		"\a\x83\x2\x2\x22F\x230\x5n\x38\x2\x230\x231\a\b\x2\x2\x231\x239\x5\x34"+
		"\x1B\x2\x232\x233\a\a\x2\x2\x233\x234\x5n\x38\x2\x234\x235\a\b\x2\x2\x235"+
		"\x236\x5\x34\x1B\x2\x236\x238\x3\x2\x2\x2\x237\x232\x3\x2\x2\x2\x238\x23B"+
		"\x3\x2\x2\x2\x239\x237\x3\x2\x2\x2\x239\x23A\x3\x2\x2\x2\x23A\x23E\x3"+
		"\x2\x2\x2\x23B\x239\x3\x2\x2\x2\x23C\x23D\a\x94\x2\x2\x23D\x23F\x5\x34"+
		"\x1B\x2\x23E\x23C\x3\x2\x2\x2\x23E\x23F\x3\x2\x2\x2\x23F+\x3\x2\x2\x2"+
		"\x240\x242\x5n\x38\x2\x241\x243\x5.\x18\x2\x242\x241\x3\x2\x2\x2\x242"+
		"\x243\x3\x2\x2\x2\x243\x247\x3\x2\x2\x2\x244\x246\x5\x30\x19\x2\x245\x244"+
		"\x3\x2\x2\x2\x246\x249\x3\x2\x2\x2\x247\x245\x3\x2\x2\x2\x247\x248\x3"+
		"\x2\x2\x2\x248-\x3\x2\x2\x2\x249\x247\x3\x2\x2\x2\x24A\x24C\x5\x62\x32"+
		"\x2\x24B\x24A\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2\x24D\x24B\x3\x2\x2\x2"+
		"\x24D\x24E\x3\x2\x2\x2\x24E\x259\x3\x2\x2\x2\x24F\x250\a\x5\x2\x2\x250"+
		"\x251\x5T+\x2\x251\x252\a\x6\x2\x2\x252\x25A\x3\x2\x2\x2\x253\x254\a\x5"+
		"\x2\x2\x254\x255\x5T+\x2\x255\x256\a\a\x2\x2\x256\x257\x5T+\x2\x257\x258"+
		"\a\x6\x2\x2\x258\x25A\x3\x2\x2\x2\x259\x24F\x3\x2\x2\x2\x259\x253\x3\x2"+
		"\x2\x2\x259\x25A\x3\x2\x2\x2\x25A/\x3\x2\x2\x2\x25B\x25C\a\x33\x2\x2\x25C"+
		"\x25E\x5\x62\x32\x2\x25D\x25B\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25E\x280"+
		"\x3\x2\x2\x2\x25F\x260\as\x2\x2\x260\x262\a\x61\x2\x2\x261\x263\t\x6\x2"+
		"\x2\x262\x261\x3\x2\x2\x2\x262\x263\x3\x2\x2\x2\x263\x264\x3\x2\x2\x2"+
		"\x264\x266\x5\x32\x1A\x2\x265\x267\a&\x2\x2\x266\x265\x3\x2\x2\x2\x266"+
		"\x267\x3\x2\x2\x2\x267\x281\x3\x2\x2\x2\x268\x26A\ah\x2\x2\x269\x268\x3"+
		"\x2\x2\x2\x269\x26A\x3\x2\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x26C\aj\x2"+
		"\x2\x26C\x281\x5\x32\x1A\x2\x26D\x26E\a\x8C\x2\x2\x26E\x281\x5\x32\x1A"+
		"\x2\x26F\x270\a.\x2\x2\x270\x271\a\x5\x2\x2\x271\x272\x5\x34\x1B\x2\x272"+
		"\x273\a\x6\x2\x2\x273\x281\x3\x2\x2\x2\x274\x27B\a:\x2\x2\x275\x27C\x5"+
		"T+\x2\x276\x27C\x5V,\x2\x277\x278\a\x5\x2\x2\x278\x279\x5\x34\x1B\x2\x279"+
		"\x27A\a\x6\x2\x2\x27A\x27C\x3\x2\x2\x2\x27B\x275\x3\x2\x2\x2\x27B\x276"+
		"\x3\x2\x2\x2\x27B\x277\x3\x2\x2\x2\x27C\x281\x3\x2\x2\x2\x27D\x27E\a/"+
		"\x2\x2\x27E\x281\x5p\x39\x2\x27F\x281\x5\x36\x1C\x2\x280\x25F\x3\x2\x2"+
		"\x2\x280\x269\x3\x2\x2\x2\x280\x26D\x3\x2\x2\x2\x280\x26F\x3\x2\x2\x2"+
		"\x280\x274\x3\x2\x2\x2\x280\x27D\x3\x2\x2\x2\x280\x27F\x3\x2\x2\x2\x281"+
		"\x31\x3\x2\x2\x2\x282\x283\am\x2\x2\x283\x284\a\x32\x2\x2\x284\x286\t"+
		"\a\x2\x2\x285\x282\x3\x2\x2\x2\x285\x286\x3\x2\x2\x2\x286\x33\x3\x2\x2"+
		"\x2\x287\x288\b\x1B\x1\x2\x288\x289\x5X-\x2\x289\x28A\x5\x34\x1B\x17\x28A"+
		"\x2D4\x3\x2\x2\x2\x28B\x2D4\x5V,\x2\x28C\x2D4\a\x9B\x2\x2\x28D\x28E\x5"+
		"\x66\x34\x2\x28E\x28F\a\x4\x2\x2\x28F\x291\x3\x2\x2\x2\x290\x28D\x3\x2"+
		"\x2\x2\x290\x291\x3\x2\x2\x2\x291\x292\x3\x2\x2\x2\x292\x293\x5h\x35\x2"+
		"\x293\x294\a\x4\x2\x2\x294\x296\x3\x2\x2\x2\x295\x290\x3\x2\x2\x2\x295"+
		"\x296\x3\x2\x2\x2\x296\x297\x3\x2\x2\x2\x297\x2D4\x5n\x38\x2\x298\x299"+
		"\x5\x64\x33\x2\x299\x2A6\a\x5\x2\x2\x29A\x29C\a@\x2\x2\x29B\x29A\x3\x2"+
		"\x2\x2\x29B\x29C\x3\x2\x2\x2\x29C\x29D\x3\x2\x2\x2\x29D\x2A2\x5\x34\x1B"+
		"\x2\x29E\x29F\a\a\x2\x2\x29F\x2A1\x5\x34\x1B\x2\x2A0\x29E\x3\x2\x2\x2"+
		"\x2A1\x2A4\x3\x2\x2\x2\x2A2\x2A0\x3\x2\x2\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3"+
		"\x2A7\x3\x2\x2\x2\x2A4\x2A2\x3\x2\x2\x2\x2A5\x2A7\a\t\x2\x2\x2A6\x29B"+
		"\x3\x2\x2\x2\x2A6\x2A5\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2A8\x3"+
		"\x2\x2\x2\x2A8\x2A9\a\x6\x2\x2\x2A9\x2D4\x3\x2\x2\x2\x2AA\x2AB\a\x5\x2"+
		"\x2\x2AB\x2AC\x5\x34\x1B\x2\x2AC\x2AD\a\x6\x2\x2\x2AD\x2D4\x3\x2\x2\x2"+
		"\x2AE\x2AF\a-\x2\x2\x2AF\x2B0\a\x5\x2\x2\x2B0\x2B1\x5\x34\x1B\x2\x2B1"+
		"\x2B2\a#\x2\x2\x2B2\x2B3\x5.\x18\x2\x2B3\x2B4\a\x6\x2\x2\x2B4\x2D4\x3"+
		"\x2\x2\x2\x2B5\x2B7\ah\x2\x2\x2B6\x2B5\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2"+
		"\x2\x2B7\x2B8\x3\x2\x2\x2\x2B8\x2BA\aH\x2\x2\x2B9\x2B6\x3\x2\x2\x2\x2B9"+
		"\x2BA\x3\x2\x2\x2\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2BC\a\x5\x2\x2\x2BC\x2BD"+
		"\x5&\x14\x2\x2BD\x2BE\a\x6\x2\x2\x2BE\x2D4\x3\x2\x2\x2\x2BF\x2C1\a,\x2"+
		"\x2\x2C0\x2C2\x5\x34\x1B\x2\x2C1\x2C0\x3\x2\x2\x2\x2C1\x2C2\x3\x2\x2\x2"+
		"\x2C2\x2C8\x3\x2\x2\x2\x2C3\x2C4\a\x93\x2\x2\x2C4\x2C5\x5\x34\x1B\x2\x2C5"+
		"\x2C6\a\x87\x2\x2\x2C6\x2C7\x5\x34\x1B\x2\x2C7\x2C9\x3\x2\x2\x2\x2C8\x2C3"+
		"\x3\x2\x2\x2\x2C9\x2CA\x3\x2\x2\x2\x2CA\x2C8\x3\x2\x2\x2\x2CA\x2CB\x3"+
		"\x2\x2\x2\x2CB\x2CE\x3\x2\x2\x2\x2CC\x2CD\a\x43\x2\x2\x2CD\x2CF\x5\x34"+
		"\x1B\x2\x2CE\x2CC\x3\x2\x2\x2\x2CE\x2CF\x3\x2\x2\x2\x2CF\x2D0\x3\x2\x2"+
		"\x2\x2D0\x2D1\a\x44\x2\x2\x2D1\x2D4\x3\x2\x2\x2\x2D2\x2D4\x5\x38\x1D\x2"+
		"\x2D3\x287\x3\x2\x2\x2\x2D3\x28B\x3\x2\x2\x2\x2D3\x28C\x3\x2\x2\x2\x2D3"+
		"\x295\x3\x2\x2\x2\x2D3\x298\x3\x2\x2\x2\x2D3\x2AA\x3\x2\x2\x2\x2D3\x2AE"+
		"\x3\x2\x2\x2\x2D3\x2B9\x3\x2\x2\x2\x2D3\x2BF\x3\x2\x2\x2\x2D3\x2D2\x3"+
		"\x2\x2\x2\x2D4\x339\x3\x2\x2\x2\x2D5\x2D6\f\x16\x2\x2\x2D6\x2D7\a\r\x2"+
		"\x2\x2D7\x338\x5\x34\x1B\x17\x2D8\x2D9\f\x15\x2\x2\x2D9\x2DA\t\b\x2\x2"+
		"\x2DA\x338\x5\x34\x1B\x16\x2DB\x2DC\f\x14\x2\x2\x2DC\x2DD\t\t\x2\x2\x2DD"+
		"\x338\x5\x34\x1B\x15\x2DE\x2DF\f\x13\x2\x2\x2DF\x2E0\t\n\x2\x2\x2E0\x338"+
		"\x5\x34\x1B\x14\x2E1\x2E2\f\x12\x2\x2\x2E2\x2E3\t\v\x2\x2\x2E3\x338\x5"+
		"\x34\x1B\x13\x2E4\x2F1\f\x11\x2\x2\x2E5\x2F2\a\b\x2\x2\x2E6\x2F2\a\x18"+
		"\x2\x2\x2E7\x2F2\a\x19\x2\x2\x2E8\x2F2\a\x1A\x2\x2\x2E9\x2F2\a^\x2\x2"+
		"\x2EA\x2EB\a^\x2\x2\x2EB\x2F2\ah\x2\x2\x2EC\x2F2\aU\x2\x2\x2ED\x2F2\a"+
		"\x63\x2\x2\x2EE\x2F2\aO\x2\x2\x2EF\x2F2\a\x65\x2\x2\x2F0\x2F2\ax\x2\x2"+
		"\x2F1\x2E5\x3\x2\x2\x2\x2F1\x2E6\x3\x2\x2\x2\x2F1\x2E7\x3\x2\x2\x2\x2F1"+
		"\x2E8\x3\x2\x2\x2\x2F1\x2E9\x3\x2\x2\x2\x2F1\x2EA\x3\x2\x2\x2\x2F1\x2EC"+
		"\x3\x2\x2\x2\x2F1\x2ED\x3\x2\x2\x2\x2F1\x2EE\x3\x2\x2\x2\x2F1\x2EF\x3"+
		"\x2\x2\x2\x2F1\x2F0\x3\x2\x2\x2\x2F2\x2F3\x3\x2\x2\x2\x2F3\x338\x5\x34"+
		"\x1B\x12\x2F4\x2F5\f\x10\x2\x2\x2F5\x2F6\a\"\x2\x2\x2F6\x338\x5\x34\x1B"+
		"\x11\x2F7\x2F8\f\xF\x2\x2\x2F8\x2F9\an\x2\x2\x2F9\x338\x5\x34\x1B\x10"+
		"\x2FA\x2FB\f\b\x2\x2\x2FB\x2FD\a^\x2\x2\x2FC\x2FE\ah\x2\x2\x2FD\x2FC\x3"+
		"\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2\x2FE\x2FF\x3\x2\x2\x2\x2FF\x338\x5\x34"+
		"\x1B\t\x300\x302\f\a\x2\x2\x301\x303\ah\x2\x2\x302\x301\x3\x2\x2\x2\x302"+
		"\x303\x3\x2\x2\x2\x303\x304\x3\x2\x2\x2\x304\x305\a)\x2\x2\x305\x306\x5"+
		"\x34\x1B\x2\x306\x307\a\"\x2\x2\x307\x308\x5\x34\x1B\b\x308\x338\x3\x2"+
		"\x2\x2\x309\x30A\f\v\x2\x2\x30A\x30B\a/\x2\x2\x30B\x338\x5p\x39\x2\x30C"+
		"\x30E\f\n\x2\x2\x30D\x30F\ah\x2\x2\x30E\x30D\x3\x2\x2\x2\x30E\x30F\x3"+
		"\x2\x2\x2\x30F\x310\x3\x2\x2\x2\x310\x311\t\f\x2\x2\x311\x314\x5\x34\x1B"+
		"\x2\x312\x313\a\x45\x2\x2\x313\x315\x5\x34\x1B\x2\x314\x312\x3\x2\x2\x2"+
		"\x314\x315\x3\x2\x2\x2\x315\x338\x3\x2\x2\x2\x316\x31B\f\t\x2\x2\x317"+
		"\x31C\a_\x2\x2\x318\x31C\ai\x2\x2\x319\x31A\ah\x2\x2\x31A\x31C\aj\x2\x2"+
		"\x31B\x317\x3\x2\x2\x2\x31B\x318\x3\x2\x2\x2\x31B\x319\x3\x2\x2\x2\x31C"+
		"\x338\x3\x2\x2\x2\x31D\x31F\f\x6\x2\x2\x31E\x320\ah\x2\x2\x31F\x31E\x3"+
		"\x2\x2\x2\x31F\x320\x3\x2\x2\x2\x320\x321\x3\x2\x2\x2\x321\x335\aU\x2"+
		"\x2\x322\x32C\a\x5\x2\x2\x323\x32D\x5&\x14\x2\x324\x329\x5\x34\x1B\x2"+
		"\x325\x326\a\a\x2\x2\x326\x328\x5\x34\x1B\x2\x327\x325\x3\x2\x2\x2\x328"+
		"\x32B\x3\x2\x2\x2\x329\x327\x3\x2\x2\x2\x329\x32A\x3\x2\x2\x2\x32A\x32D"+
		"\x3\x2\x2\x2\x32B\x329\x3\x2\x2\x2\x32C\x323\x3\x2\x2\x2\x32C\x324\x3"+
		"\x2\x2\x2\x32C\x32D\x3\x2\x2\x2\x32D\x32E\x3\x2\x2\x2\x32E\x336\a\x6\x2"+
		"\x2\x32F\x330\x5\x66\x34\x2\x330\x331\a\x4\x2\x2\x331\x333\x3\x2\x2\x2"+
		"\x332\x32F\x3\x2\x2\x2\x332\x333\x3\x2\x2\x2\x333\x334\x3\x2\x2\x2\x334"+
		"\x336\x5h\x35\x2\x335\x322\x3\x2\x2\x2\x335\x332\x3\x2\x2\x2\x336\x338"+
		"\x3\x2\x2\x2\x337\x2D5\x3\x2\x2\x2\x337\x2D8\x3\x2\x2\x2\x337\x2DB\x3"+
		"\x2\x2\x2\x337\x2DE\x3\x2\x2\x2\x337\x2E1\x3\x2\x2\x2\x337\x2E4\x3\x2"+
		"\x2\x2\x337\x2F4\x3\x2\x2\x2\x337\x2F7\x3\x2\x2\x2\x337\x2FA\x3\x2\x2"+
		"\x2\x337\x300\x3\x2\x2\x2\x337\x309\x3\x2\x2\x2\x337\x30C\x3\x2\x2\x2"+
		"\x337\x316\x3\x2\x2\x2\x337\x31D\x3\x2\x2\x2\x338\x33B\x3\x2\x2\x2\x339"+
		"\x337\x3\x2\x2\x2\x339\x33A\x3\x2\x2\x2\x33A\x35\x3\x2\x2\x2\x33B\x339"+
		"\x3\x2\x2\x2\x33C\x33D\aw\x2\x2\x33D\x349\x5r:\x2\x33E\x33F\a\x5\x2\x2"+
		"\x33F\x344\x5n\x38\x2\x340\x341\a\a\x2\x2\x341\x343\x5n\x38\x2\x342\x340"+
		"\x3\x2\x2\x2\x343\x346\x3\x2\x2\x2\x344\x342\x3\x2\x2\x2\x344\x345\x3"+
		"\x2\x2\x2\x345\x347\x3\x2\x2\x2\x346\x344\x3\x2\x2\x2\x347\x348\a\x6\x2"+
		"\x2\x348\x34A\x3\x2\x2\x2\x349\x33E\x3\x2\x2\x2\x349\x34A\x3\x2\x2\x2"+
		"\x34A\x35D\x3\x2\x2\x2\x34B\x34C\am\x2\x2\x34C\x355\t\r\x2\x2\x34D\x34E"+
		"\a\x83\x2\x2\x34E\x356\aj\x2\x2\x34F\x350\a\x83\x2\x2\x350\x356\a:\x2"+
		"\x2\x351\x356\a+\x2\x2\x352\x356\a}\x2\x2\x353\x354\ag\x2\x2\x354\x356"+
		"\a\x1C\x2\x2\x355\x34D\x3\x2\x2\x2\x355\x34F\x3\x2\x2\x2\x355\x351\x3"+
		"\x2\x2\x2\x355\x352\x3\x2\x2\x2\x355\x353\x3\x2\x2\x2\x356\x35A\x3\x2"+
		"\x2\x2\x357\x358\a\x65\x2\x2\x358\x35A\x5\x62\x32\x2\x359\x34B\x3\x2\x2"+
		"\x2\x359\x357\x3\x2\x2\x2\x35A\x35C\x3\x2\x2\x2\x35B\x359\x3\x2\x2\x2"+
		"\x35C\x35F\x3\x2\x2\x2\x35D\x35B\x3\x2\x2\x2\x35D\x35E\x3\x2\x2\x2\x35E"+
		"\x36A\x3\x2\x2\x2\x35F\x35D\x3\x2\x2\x2\x360\x362\ah\x2\x2\x361\x360\x3"+
		"\x2\x2\x2\x361\x362\x3\x2\x2\x2\x362\x363\x3\x2\x2\x2\x363\x368\a;\x2"+
		"\x2\x364\x365\aX\x2\x2\x365\x369\a<\x2\x2\x366\x367\aX\x2\x2\x367\x369"+
		"\aT\x2\x2\x368\x364\x3\x2\x2\x2\x368\x366\x3\x2\x2\x2\x368\x369\x3\x2"+
		"\x2\x2\x369\x36B\x3\x2\x2\x2\x36A\x361\x3\x2\x2\x2\x36A\x36B\x3\x2\x2"+
		"\x2\x36B\x37\x3\x2\x2\x2\x36C\x36D\au\x2\x2\x36D\x372\a\x5\x2\x2\x36E"+
		"\x373\aS\x2\x2\x36F\x370\t\xE\x2\x2\x370\x371\a\a\x2\x2\x371\x373\x5Z"+
		".\x2\x372\x36E\x3\x2\x2\x2\x372\x36F\x3\x2\x2\x2\x373\x374\x3\x2\x2\x2"+
		"\x374\x375\a\x6\x2\x2\x375\x39\x3\x2\x2\x2\x376\x379\x5n\x38\x2\x377\x378"+
		"\a/\x2\x2\x378\x37A\x5p\x39\x2\x379\x377\x3\x2\x2\x2\x379\x37A\x3\x2\x2"+
		"\x2\x37A\x37C\x3\x2\x2\x2\x37B\x37D\t\x6\x2\x2\x37C\x37B\x3\x2\x2\x2\x37C"+
		"\x37D\x3\x2\x2\x2\x37D;\x3\x2\x2\x2\x37E\x37F\a\x33\x2\x2\x37F\x381\x5"+
		"\x62\x32\x2\x380\x37E\x3\x2\x2\x2\x380\x381\x3\x2\x2\x2\x381\x3A6\x3\x2"+
		"\x2\x2\x382\x383\as\x2\x2\x383\x386\a\x61\x2\x2\x384\x386\a\x8C\x2\x2"+
		"\x385\x382\x3\x2\x2\x2\x385\x384\x3\x2\x2\x2\x386\x387\x3\x2\x2\x2\x387"+
		"\x388\a\x5\x2\x2\x388\x38D\x5:\x1E\x2\x389\x38A\a\a\x2\x2\x38A\x38C\x5"+
		":\x1E\x2\x38B\x389\x3\x2\x2\x2\x38C\x38F\x3\x2\x2\x2\x38D\x38B\x3\x2\x2"+
		"\x2\x38D\x38E\x3\x2\x2\x2\x38E\x390\x3\x2\x2\x2\x38F\x38D\x3\x2\x2\x2"+
		"\x390\x391\a\x6\x2\x2\x391\x392\x5\x32\x1A\x2\x392\x3A7\x3\x2\x2\x2\x393"+
		"\x394\a.\x2\x2\x394\x395\a\x5\x2\x2\x395\x396\x5\x34\x1B\x2\x396\x397"+
		"\a\x6\x2\x2\x397\x3A7\x3\x2\x2\x2\x398\x399\aL\x2\x2\x399\x39A\a\x61\x2"+
		"\x2\x39A\x39B\a\x5\x2\x2\x39B\x3A0\x5n\x38\x2\x39C\x39D\a\a\x2\x2\x39D"+
		"\x39F\x5n\x38\x2\x39E\x39C\x3\x2\x2\x2\x39F\x3A2\x3\x2\x2\x2\x3A0\x39E"+
		"\x3\x2\x2\x2\x3A0\x3A1\x3\x2\x2\x2\x3A1\x3A3\x3\x2\x2\x2\x3A2\x3A0\x3"+
		"\x2\x2\x2\x3A3\x3A4\a\x6\x2\x2\x3A4\x3A5\x5\x36\x1C\x2\x3A5\x3A7\x3\x2"+
		"\x2\x2\x3A6\x385\x3\x2\x2\x2\x3A6\x393\x3\x2\x2\x2\x3A6\x398\x3\x2\x2"+
		"\x2\x3A7=\x3\x2\x2\x2\x3A8\x3AA\a\x95\x2\x2\x3A9\x3AB\av\x2\x2\x3AA\x3A9"+
		"\x3\x2\x2\x2\x3AA\x3AB\x3\x2\x2\x2\x3AB\x3AC\x3\x2\x2\x2\x3AC\x3AD\x5"+
		"R*\x2\x3AD\x3AE\a#\x2\x2\x3AE\x3AF\a\x5\x2\x2\x3AF\x3B0\x5&\x14\x2\x3B0"+
		"\x3BA\a\x6\x2\x2\x3B1\x3B2\a\a\x2\x2\x3B2\x3B3\x5R*\x2\x3B3\x3B4\a#\x2"+
		"\x2\x3B4\x3B5\a\x5\x2\x2\x3B5\x3B6\x5&\x14\x2\x3B6\x3B7\a\x6\x2\x2\x3B7"+
		"\x3B9\x3\x2\x2\x2\x3B8\x3B1\x3\x2\x2\x2\x3B9\x3BC\x3\x2\x2\x2\x3BA\x3B8"+
		"\x3\x2\x2\x2\x3BA\x3BB\x3\x2\x2\x2\x3BB?\x3\x2\x2\x2\x3BC\x3BA\x3\x2\x2"+
		"\x2\x3BD\x3BE\x5\x66\x34\x2\x3BE\x3BF\a\x4\x2\x2\x3BF\x3C1\x3\x2\x2\x2"+
		"\x3C0\x3BD\x3\x2\x2\x2\x3C0\x3C1\x3\x2\x2\x2\x3C1\x3C2\x3\x2\x2\x2\x3C2"+
		"\x3C8\x5h\x35\x2\x3C3\x3C4\aW\x2\x2\x3C4\x3C5\a*\x2\x2\x3C5\x3C9\x5t;"+
		"\x2\x3C6\x3C7\ah\x2\x2\x3C7\x3C9\aW\x2\x2\x3C8\x3C3\x3\x2\x2\x2\x3C8\x3C6"+
		"\x3\x2\x2\x2\x3C8\x3C9\x3\x2\x2\x2\x3C9\x41\x3\x2\x2\x2\x3CA\x3CD\x5\x34"+
		"\x1B\x2\x3CB\x3CC\a/\x2\x2\x3CC\x3CE\x5p\x39\x2\x3CD\x3CB\x3\x2\x2\x2"+
		"\x3CD\x3CE\x3\x2\x2\x2\x3CE\x3D0\x3\x2\x2\x2\x3CF\x3D1\t\x6\x2\x2\x3D0"+
		"\x3CF\x3\x2\x2\x2\x3D0\x3D1\x3\x2\x2\x2\x3D1\x43\x3\x2\x2\x2\x3D2\x3DE"+
		"\x5h\x35\x2\x3D3\x3D4\a\x5\x2\x2\x3D4\x3D9\x5n\x38\x2\x3D5\x3D6\a\a\x2"+
		"\x2\x3D6\x3D8\x5n\x38\x2\x3D7\x3D5\x3\x2\x2\x2\x3D8\x3DB\x3\x2\x2\x2\x3D9"+
		"\x3D7\x3\x2\x2\x2\x3D9\x3DA\x3\x2\x2\x2\x3DA\x3DC\x3\x2\x2\x2\x3DB\x3D9"+
		"\x3\x2\x2\x2\x3DC\x3DD\a\x6\x2\x2\x3DD\x3DF\x3\x2\x2\x2\x3DE\x3D3\x3\x2"+
		"\x2\x2\x3DE\x3DF\x3\x2\x2\x2\x3DF\x3E0\x3\x2\x2\x2\x3E0\x3E1\a#\x2\x2"+
		"\x3E1\x3E2\a\x5\x2\x2\x3E2\x3E3\x5&\x14\x2\x3E3\x3E4\a\x6\x2\x2\x3E4\x45"+
		"\x3\x2\x2\x2\x3E5\x3F2\a\t\x2\x2\x3E6\x3E7\x5h\x35\x2\x3E7\x3E8\a\x4\x2"+
		"\x2\x3E8\x3E9\a\t\x2\x2\x3E9\x3F2\x3\x2\x2\x2\x3EA\x3EF\x5\x34\x1B\x2"+
		"\x3EB\x3ED\a#\x2\x2\x3EC\x3EB\x3\x2\x2\x2\x3EC\x3ED\x3\x2\x2\x2\x3ED\x3EE"+
		"\x3\x2\x2\x2\x3EE\x3F0\x5^\x30\x2\x3EF\x3EC\x3\x2\x2\x2\x3EF\x3F0\x3\x2"+
		"\x2\x2\x3F0\x3F2\x3\x2\x2\x2\x3F1\x3E5\x3\x2\x2\x2\x3F1\x3E6\x3\x2\x2"+
		"\x2\x3F1\x3EA\x3\x2\x2\x2\x3F2G\x3\x2\x2\x2\x3F3\x3F4\x5\x66\x34\x2\x3F4"+
		"\x3F5\a\x4\x2\x2\x3F5\x3F7\x3\x2\x2\x2\x3F6\x3F3\x3\x2\x2\x2\x3F6\x3F7"+
		"\x3\x2\x2\x2\x3F7\x3F8\x3\x2\x2\x2\x3F8\x3FD\x5h\x35\x2\x3F9\x3FB\a#\x2"+
		"\x2\x3FA\x3F9\x3\x2\x2\x2\x3FA\x3FB\x3\x2\x2\x2\x3FB\x3FC\x3\x2\x2\x2"+
		"\x3FC\x3FE\x5\x80\x41\x2\x3FD\x3FA\x3\x2\x2\x2\x3FD\x3FE\x3\x2\x2\x2\x3FE"+
		"\x404\x3\x2\x2\x2\x3FF\x400\aW\x2\x2\x400\x401\a*\x2\x2\x401\x405\x5t"+
		";\x2\x402\x403\ah\x2\x2\x403\x405\aW\x2\x2\x404\x3FF\x3\x2\x2\x2\x404"+
		"\x402\x3\x2\x2\x2\x404\x405\x3\x2\x2\x2\x405\x423\x3\x2\x2\x2\x406\x410"+
		"\a\x5\x2\x2\x407\x40C\x5H%\x2\x408\x409\a\a\x2\x2\x409\x40B\x5H%\x2\x40A"+
		"\x408\x3\x2\x2\x2\x40B\x40E\x3\x2\x2\x2\x40C\x40A\x3\x2\x2\x2\x40C\x40D"+
		"\x3\x2\x2\x2\x40D\x411\x3\x2\x2\x2\x40E\x40C\x3\x2\x2\x2\x40F\x411\x5"+
		"J&\x2\x410\x407\x3\x2\x2\x2\x410\x40F\x3\x2\x2\x2\x411\x412\x3\x2\x2\x2"+
		"\x412\x417\a\x6\x2\x2\x413\x415\a#\x2\x2\x414\x413\x3\x2\x2\x2\x414\x415"+
		"\x3\x2\x2\x2\x415\x416\x3\x2\x2\x2\x416\x418\x5\x80\x41\x2\x417\x414\x3"+
		"\x2\x2\x2\x417\x418\x3\x2\x2\x2\x418\x423\x3\x2\x2\x2\x419\x41A\a\x5\x2"+
		"\x2\x41A\x41B\x5&\x14\x2\x41B\x420\a\x6\x2\x2\x41C\x41E\a#\x2\x2\x41D"+
		"\x41C\x3\x2\x2\x2\x41D\x41E\x3\x2\x2\x2\x41E\x41F\x3\x2\x2\x2\x41F\x421"+
		"\x5\x80\x41\x2\x420\x41D\x3\x2\x2\x2\x420\x421\x3\x2\x2\x2\x421\x423\x3"+
		"\x2\x2\x2\x422\x3F6\x3\x2\x2\x2\x422\x406\x3\x2\x2\x2\x422\x419\x3\x2"+
		"\x2\x2\x423I\x3\x2\x2\x2\x424\x42B\x5H%\x2\x425\x426\x5L\'\x2\x426\x427"+
		"\x5H%\x2\x427\x428\x5N(\x2\x428\x42A\x3\x2\x2\x2\x429\x425\x3\x2\x2\x2"+
		"\x42A\x42D\x3\x2\x2\x2\x42B\x429\x3\x2\x2\x2\x42B\x42C\x3\x2\x2\x2\x42C"+
		"K\x3\x2\x2\x2\x42D\x42B\x3\x2\x2\x2\x42E\x43C\a\a\x2\x2\x42F\x431\a\x66"+
		"\x2\x2\x430\x42F\x3\x2\x2\x2\x430\x431\x3\x2\x2\x2\x431\x438\x3\x2\x2"+
		"\x2\x432\x434\a\x62\x2\x2\x433\x435\ap\x2\x2\x434\x433\x3\x2\x2\x2\x434"+
		"\x435\x3\x2\x2\x2\x435\x439\x3\x2\x2\x2\x436\x439\aY\x2\x2\x437\x439\a"+
		"\x35\x2\x2\x438\x432\x3\x2\x2\x2\x438\x436\x3\x2\x2\x2\x438\x437\x3\x2"+
		"\x2\x2\x438\x439\x3\x2\x2\x2\x439\x43A\x3\x2\x2\x2\x43A\x43C\a`\x2\x2"+
		"\x43B\x42E\x3\x2\x2\x2\x43B\x430\x3\x2\x2\x2\x43CM\x3\x2\x2\x2\x43D\x43E"+
		"\am\x2\x2\x43E\x44C\x5\x34\x1B\x2\x43F\x440\a\x8E\x2\x2\x440\x441\a\x5"+
		"\x2\x2\x441\x446\x5n\x38\x2\x442\x443\a\a\x2\x2\x443\x445\x5n\x38\x2\x444"+
		"\x442\x3\x2\x2\x2\x445\x448\x3\x2\x2\x2\x446\x444\x3\x2\x2\x2\x446\x447"+
		"\x3\x2\x2\x2\x447\x449\x3\x2\x2\x2\x448\x446\x3\x2\x2\x2\x449\x44A\a\x6"+
		"\x2\x2\x44A\x44C\x3\x2\x2\x2\x44B\x43D\x3\x2\x2\x2\x44B\x43F\x3\x2\x2"+
		"\x2\x44B\x44C\x3\x2\x2\x2\x44CO\x3\x2\x2\x2\x44D\x44F\a\x82\x2\x2\x44E"+
		"\x450\t\x5\x2\x2\x44F\x44E\x3\x2\x2\x2\x44F\x450\x3\x2\x2\x2\x450\x451"+
		"\x3\x2\x2\x2\x451\x456\x5\x46$\x2\x452\x453\a\a\x2\x2\x453\x455\x5\x46"+
		"$\x2\x454\x452\x3\x2\x2\x2\x455\x458\x3\x2\x2\x2\x456\x454\x3\x2\x2\x2"+
		"\x456\x457\x3\x2\x2\x2\x457\x465\x3\x2\x2\x2\x458\x456\x3\x2\x2\x2\x459"+
		"\x463\aM\x2\x2\x45A\x45F\x5H%\x2\x45B\x45C\a\a\x2\x2\x45C\x45E\x5H%\x2"+
		"\x45D\x45B\x3\x2\x2\x2\x45E\x461\x3\x2\x2\x2\x45F\x45D\x3\x2\x2\x2\x45F"+
		"\x460\x3\x2\x2\x2\x460\x464\x3\x2\x2\x2\x461\x45F\x3\x2\x2\x2\x462\x464"+
		"\x5J&\x2\x463\x45A\x3\x2\x2\x2\x463\x462\x3\x2\x2\x2\x464\x466\x3\x2\x2"+
		"\x2\x465\x459\x3\x2\x2\x2\x465\x466\x3\x2\x2\x2\x466\x469\x3\x2\x2\x2"+
		"\x467\x468\a\x94\x2\x2\x468\x46A\x5\x34\x1B\x2\x469\x467\x3\x2\x2\x2\x469"+
		"\x46A\x3\x2\x2\x2\x46A\x479\x3\x2\x2\x2\x46B\x46C\aP\x2\x2\x46C\x46D\a"+
		"*\x2\x2\x46D\x472\x5\x34\x1B\x2\x46E\x46F\a\a\x2\x2\x46F\x471\x5\x34\x1B"+
		"\x2\x470\x46E\x3\x2\x2\x2\x471\x474\x3\x2\x2\x2\x472\x470\x3\x2\x2\x2"+
		"\x472\x473\x3\x2\x2\x2\x473\x477\x3\x2\x2\x2\x474\x472\x3\x2\x2\x2\x475"+
		"\x476\aQ\x2\x2\x476\x478\x5\x34\x1B\x2\x477\x475\x3\x2\x2\x2\x477\x478"+
		"\x3\x2\x2\x2\x478\x47A\x3\x2\x2\x2\x479\x46B\x3\x2\x2\x2\x479\x47A\x3"+
		"\x2\x2\x2\x47A\x498\x3\x2\x2\x2\x47B\x47C\a\x90\x2\x2\x47C\x47D\a\x5\x2"+
		"\x2\x47D\x482\x5\x34\x1B\x2\x47E\x47F\a\a\x2\x2\x47F\x481\x5\x34\x1B\x2"+
		"\x480\x47E\x3\x2\x2\x2\x481\x484\x3\x2\x2\x2\x482\x480\x3\x2\x2\x2\x482"+
		"\x483\x3\x2\x2\x2\x483\x485\x3\x2\x2\x2\x484\x482\x3\x2\x2\x2\x485\x494"+
		"\a\x6\x2\x2\x486\x487\a\a\x2\x2\x487\x488\a\x5\x2\x2\x488\x48D\x5\x34"+
		"\x1B\x2\x489\x48A\a\a\x2\x2\x48A\x48C\x5\x34\x1B\x2\x48B\x489\x3\x2\x2"+
		"\x2\x48C\x48F\x3\x2\x2\x2\x48D\x48B\x3\x2\x2\x2\x48D\x48E\x3\x2\x2\x2"+
		"\x48E\x490\x3\x2\x2\x2\x48F\x48D\x3\x2\x2\x2\x490\x491\a\x6\x2\x2\x491"+
		"\x493\x3\x2\x2\x2\x492\x486\x3\x2\x2\x2\x493\x496\x3\x2\x2\x2\x494\x492"+
		"\x3\x2\x2\x2\x494\x495\x3\x2\x2\x2\x495\x498\x3\x2\x2\x2\x496\x494\x3"+
		"\x2\x2\x2\x497\x44D\x3\x2\x2\x2\x497\x47B\x3\x2\x2\x2\x498Q\x3\x2\x2\x2"+
		"\x499\x4A5\x5h\x35\x2\x49A\x49B\a\x5\x2\x2\x49B\x4A0\x5n\x38\x2\x49C\x49D"+
		"\a\a\x2\x2\x49D\x49F\x5n\x38\x2\x49E\x49C\x3\x2\x2\x2\x49F\x4A2\x3\x2"+
		"\x2\x2\x4A0\x49E\x3\x2\x2\x2\x4A0\x4A1\x3\x2\x2\x2\x4A1\x4A3\x3\x2\x2"+
		"\x2\x4A2\x4A0\x3\x2\x2\x2\x4A3\x4A4\a\x6\x2\x2\x4A4\x4A6\x3\x2\x2\x2\x4A5"+
		"\x49A\x3\x2\x2\x2\x4A5\x4A6\x3\x2\x2\x2\x4A6S\x3\x2\x2\x2\x4A7\x4A9\t"+
		"\t\x2\x2\x4A8\x4A7\x3\x2\x2\x2\x4A8\x4A9\x3\x2\x2\x2\x4A9\x4AA\x3\x2\x2"+
		"\x2\x4AA\x4AB\a\x9A\x2\x2\x4ABU\x3\x2\x2\x2\x4AC\x4AD\t\xF\x2\x2\x4AD"+
		"W\x3\x2\x2\x2\x4AE\x4AF\t\x10\x2\x2\x4AFY\x3\x2\x2\x2\x4B0\x4B1\a\x9C"+
		"\x2\x2\x4B1[\x3\x2\x2\x2\x4B2\x4B5\x5\x34\x1B\x2\x4B3\x4B5\x5,\x17\x2"+
		"\x4B4\x4B2\x3\x2\x2\x2\x4B4\x4B3\x3\x2\x2\x2\x4B5]\x3\x2\x2\x2\x4B6\x4B7"+
		"\t\x11\x2\x2\x4B7_\x3\x2\x2\x2\x4B8\x4B9\t\x12\x2\x2\x4B9\x61\x3\x2\x2"+
		"\x2\x4BA\x4BB\x5\x84\x43\x2\x4BB\x63\x3\x2\x2\x2\x4BC\x4BD\x5\x84\x43"+
		"\x2\x4BD\x65\x3\x2\x2\x2\x4BE\x4BF\x5\x84\x43\x2\x4BFg\x3\x2\x2\x2\x4C0"+
		"\x4C1\x5\x84\x43\x2\x4C1i\x3\x2\x2\x2\x4C2\x4C3\x5\x84\x43\x2\x4C3k\x3"+
		"\x2\x2\x2\x4C4\x4C5\x5\x84\x43\x2\x4C5m\x3\x2\x2\x2\x4C6\x4C7\x5\x84\x43"+
		"\x2\x4C7o\x3\x2\x2\x2\x4C8\x4C9\x5\x84\x43\x2\x4C9q\x3\x2\x2\x2\x4CA\x4CB"+
		"\x5\x84\x43\x2\x4CBs\x3\x2\x2\x2\x4CC\x4CD\x5\x84\x43\x2\x4CDu\x3\x2\x2"+
		"\x2\x4CE\x4CF\x5\x84\x43\x2\x4CFw\x3\x2\x2\x2\x4D0\x4D1\x5\x84\x43\x2"+
		"\x4D1y\x3\x2\x2\x2\x4D2\x4D3\x5\x84\x43\x2\x4D3{\x3\x2\x2\x2\x4D4\x4D5"+
		"\x5\x84\x43\x2\x4D5}\x3\x2\x2\x2\x4D6\x4D7\x5\x84\x43\x2\x4D7\x7F\x3\x2"+
		"\x2\x2\x4D8\x4D9\x5\x84\x43\x2\x4D9\x81\x3\x2\x2\x2\x4DA\x4DB\x5\x84\x43"+
		"\x2\x4DB\x83\x3\x2\x2\x2\x4DC\x4E4\a\x99\x2\x2\x4DD\x4E4\x5`\x31\x2\x4DE"+
		"\x4E4\a\x9C\x2\x2\x4DF\x4E0\a\x5\x2\x2\x4E0\x4E1\x5\x84\x43\x2\x4E1\x4E2"+
		"\a\x6\x2\x2\x4E2\x4E4\x3\x2\x2\x2\x4E3\x4DC\x3\x2\x2\x2\x4E3\x4DD\x3\x2"+
		"\x2\x2\x4E3\x4DE\x3\x2\x2\x2\x4E3\x4DF\x3\x2\x2\x2\x4E4\x85\x3\x2\x2\x2"+
		"\xAC\x88\x8A\xA3\xAA\xB2\xB5\xBF\xC1\xC5\xCB\xD0\xDB\xE1\xE5\xEB\xF0\xF9"+
		"\x100\x106\x10A\x111\x116\x11A\x125\x128\x12A\x130\x136\x13A\x141\x147"+
		"\x14D\x153\x158\x15F\x166\x16C\x171\x179\x17E\x186\x18B\x193\x198\x19D"+
		"\x1A4\x1AD\x1B2\x1BB\x1C6\x1CD\x1D3\x1D8\x1DA\x1DE\x1E1\x1E7\x1EC\x1F6"+
		"\x1F9\x1FD\x204\x20D\x211\x213\x217\x220\x225\x227\x22A\x239\x23E\x242"+
		"\x247\x24D\x259\x25D\x262\x266\x269\x27B\x280\x285\x290\x295\x29B\x2A2"+
		"\x2A6\x2B6\x2B9\x2C1\x2CA\x2CE\x2D3\x2F1\x2FD\x302\x30E\x314\x31B\x31F"+
		"\x329\x32C\x332\x335\x337\x339\x344\x349\x355\x359\x35D\x361\x368\x36A"+
		"\x372\x379\x37C\x380\x385\x38D\x3A0\x3A6\x3AA\x3BA\x3C0\x3C8\x3CD\x3D0"+
		"\x3D9\x3DE\x3EC\x3EF\x3F1\x3F6\x3FA\x3FD\x404\x40C\x410\x414\x417\x41D"+
		"\x420\x422\x42B\x430\x434\x438\x43B\x446\x44B\x44F\x456\x45F\x463\x465"+
		"\x469\x472\x477\x479\x482\x48D\x494\x497\x4A0\x4A5\x4A8\x4B4\x4E3";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace WindowsFormsApplication2
